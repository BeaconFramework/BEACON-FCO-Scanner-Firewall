package com.firewall;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Level;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.opennebula.client.Client;
import org.opennebula.client.OneResponse;
import org.opennebula.client.secgroup.SecurityGroup;
import org.opennebula.client.vm.VirtualMachine;

import com.global.Globals;
import com.scanner.EmailSystem;

public class CreateOpenNebulaFirewallTemplate {

	private static Logger LOGGER = LogManager.getLogger(CreateOpenNebulaFirewallTemplate.class);

	/*
	 * Open Nebula does not support adding new security groups to VMs which have
	 * already been created. So the only way to apply the security group
	 * firewall is to edit a security group that has been applied to the VM.
	 */
	public void editSecurityGroup(String UUID, String emailAddress, String IP) {

		Client oneClient;
		// Create auth variables from username and password
		String auth = Globals.OpenNebulaCloudUsernameCredential + ":" + Globals.OpenNebulaCloudPasswordCredential;
		LOGGER.log(Level.INFO, "OpenNebula Auth variable: " + auth);
		LOGGER.info("Open Nebula VM UUID: " + UUID);

		try {

			// Create Open Nebula API Client
			oneClient = new Client(auth, Globals.OpenNebulaEndpoint);
			LOGGER.info("Client created");

			// Get VM details
			OneResponse vmInfo = VirtualMachine.info(oneClient, Integer.parseInt(UUID));

			// Get ID of security group applied to the server
			int securityGroupID = getSecurityGroupID(vmInfo.getMessage());
			LOGGER.log(Level.INFO, "Open Nebula Security Group ID: " + securityGroupID);

			// If security group is the default security group then abort applying new rules
			if (securityGroupID == 0) {
				EmailSystem emailSystem = new EmailSystem();
				emailSystem.sendNoCustomSecGroupEmail(UUID, IP, emailAddress);
				return;
			}

			// Retrieve firewall key applied to server
			String firewallKey = getFirewallKey(vmInfo.getMessage());
			// Get corresponding security group template for firewall key
			String secGroup = getSecGroupString(firewallKey);

			// Update security group with new template
			OneResponse rc3 = SecurityGroup.update(oneClient, securityGroupID, secGroup, false);
			LOGGER.info("Security Group Template applied to Security Group with ID " + rc3.getMessage());

		} catch (Exception e) {
			LOGGER.info("exception hit");
			LOGGER.error(e.getMessage());
		}
	}

	// Match firewall key with template creator string
	public String getSecGroupString(String key) {

		if (key != null && !key.isEmpty())
			key = key.toLowerCase();

		String result = "";
		if (key == null)
			result = updateSecGroupDefault();

		else if (key.equals("email"))
			result = updateSecGroupEmail();

		else if (key.equals("ssh"))
			result = updateSecGroupSSH();
		else if (key.equals("telnet"))
			result = updateSecGroupTelnet();
		else if (key.equals("web_server"))
			result = updateSecGroupWebServer();
		else if (key.equals("mysql"))
			result = updateSecGroupMySQL();

		return result;

	}

	public String updateSecGroupDefault() {

		String secGroup = "NAME = testGroup\n";
		return secGroup;
	}

	public String updateSecGroupEmail() {

		String secGroup = "NAME = emailTemplate\n";
		int pop3Port = 110;
		int smtpPort = 25;
		int imapPort = 143;

		secGroup = secGroup + createSecGroupRuleString("TCP", "inbound", pop3Port);
		secGroup = secGroup + createSecGroupRuleString("TCP", "inbound", smtpPort);
		secGroup = secGroup + createSecGroupRuleString("TCP", "inbound", imapPort);

		return secGroup;
	}

	public String updateSecGroupTelnet() {

		String secGroup = "NAME = TelnetTemplate\n";
		int telnetPort = 23;

		secGroup = secGroup + createSecGroupRuleString("TCP", "inbound", telnetPort);

		return secGroup;
	}

	public String updateSecGroupWebServer() {

		String secGroup = "NAME = WebServerTemplate\n";
		int httpPort = 80;
		int ftpDataPort = 20;
		int ftpControlPort = 21;
		int httpsPort = 443;
		int sshPort = 22;

		secGroup = secGroup + createSecGroupRuleString("TCP", "inbound", httpPort);
		secGroup = secGroup + createSecGroupRuleString("TCP", "inbound", ftpDataPort);
		secGroup = secGroup + createSecGroupRuleString("TCP", "inbound", ftpControlPort);
		secGroup = secGroup + createSecGroupRuleString("TCP", "inbound", httpsPort);

		return secGroup;

	}

	public String updateSecGroupMySQL() {

		String secGroup = "NAME = MySQLTemplate\n";
		int sshPort = 22;
		int mysqlPort = 3306;
		int mysqlPort2 = 1433;

		secGroup = secGroup + createSecGroupRuleString("TCP", "inbound", sshPort);
		secGroup = secGroup + createSecGroupRuleString("TCP", "inbound", mysqlPort);
		secGroup = secGroup + createSecGroupRuleString("TCP", "inbound", mysqlPort2);

		return secGroup;
	}

	public String updateSecGroupSSH() {

		String secGroup = "NAME = SSHTemplate\n";
		int sshPort = 22;
		int ftpPort = 21;

		secGroup = secGroup + createSecGroupRuleString("TCP", "inbound", sshPort);
		secGroup = secGroup + createSecGroupRuleString("TCP", "inbound", ftpPort);

		return secGroup;
	}

	public String getFirewallKey(String responsemsg) {

		try {

			String delim1 = "<FIREWALL><![CDATA[";
			String delim2 = "]]></FIREWALL>";
			String firewallTag = "default";

			firewallTag = StringUtils.substringBetween(responsemsg, delim1, delim2);
			LOGGER.info("Received Firewall Tag: " + firewallTag);

			return firewallTag;
		}

		catch (Exception e) {

			LOGGER.info("No Firewall tag found");
			return "";
		}
	}

	// Method used to extract security group information from the VM info string
	private int getSecurityGroupID(String responseMsg) {

		if (!responseMsg.equals("null")) {

			String delim1 = "</NIC_ID><SECURITY_GROUPS><![CDATA[";
			String delim2 = "]]>";
			String securityGroupID = "";

			String content = StringUtils.substringBetween(responseMsg, delim1, delim2);
			String[] tokens = content.split(",");
			LOGGER.info("Security Group IDs: ");

			for (int i = 0; i < tokens.length; i++) {
				
				String current = tokens[i];
				System.out.println(current);
				if (!current.equals("0"))
					securityGroupID = current;
			}
			
			if(securityGroupID.equals(""))
				return 0;

			return Integer.parseInt(securityGroupID);
		} else
			return 0;
	}

	public String createSecGroupRuleString(String protocol, String ruleType, int portNumber) {

		String ruleString = "RULE = [PROTOCOL = " + protocol + ", RULE_TYPE = " + ruleType + ", RANGE = " + portNumber
				+ "]\n";
		return ruleString;
	}

}

package com.firewall;

import java.util.Iterator;
import java.util.Map;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.openstack4j.api.Builders;
import org.openstack4j.api.OSClient.OSClientV2;
import org.openstack4j.model.compute.Server;
import org.openstack4j.model.network.SecurityGroup;
import org.openstack4j.model.network.SecurityGroupRule;
import org.openstack4j.openstack.OSFactory;

import com.global.Globals;
import com.model.Firewall;

public class CreateOpenstackFirewallFromConfig {
	
	private static Logger LOGGER = LogManager.getLogger(CreateOpenstackFirewallTemplate.class);

	private final String endpoint = Globals.OpenstackEndpoint;
	private final String username = Globals.OpenstackCloudUsernameCredential;
	private final String password = Globals.OpenstackCloudPasswordCredential;
	private final String tenant = Globals.OpenstackCloudTenant;

	public void createFirewall(String UUID) {

		try{
		
		// Authenticate with Openstack API
		OSClientV2 os = OSFactory.builderV2().endpoint(endpoint).credentials(username, password).tenantName(tenant)
				.authenticate();
		LOGGER.info("Authenticated");
		// Check VM for metadata firewall key entry
		String key = checkForKey(os, UUID);
		LOGGER.info("Key: " + key);
		// Create the security group for the given key
		SecurityGroup secGroup = createFirewallFromKey(key, os);
		// Apply security group to the VM
		os.compute().servers().addSecurityGroup(UUID, secGroup.getId());
		}
		catch(Exception e){
			
			LOGGER.error(e.getMessage());
		}
	}

	private SecurityGroup createFirewallFromKey(String key, OSClientV2 os) {

		//Check to see if key corresponds to templates
		Firewall firewall = getConfig(key);
		

		return null;
	}

	//Create default firewall, opening all TCP ports
	private SecurityGroup createDefaultFirewall(OSClientV2 os) {

		SecurityGroup secGroup = Builders.securityGroup().name("Generated Default Firewall").build();
		secGroup = os.networking().securitygroup().create(secGroup);
		//Create rules within the security group
		SecurityGroupRule secRule = Builders.securityGroupRule().securityGroupId(secGroup.getId()).direction("ingress")
				.portRangeMin(1).portRangeMax(65535).protocol("TCP").build();
		os.networking().securityrule().create(secRule);

		return secGroup;
	}
	
	private SecurityGroup createFirewall(OSClientV2 os,String key){
		
		SecurityGroup secGroup = Builders.securityGroup().name(key + " Generated Firewall").build();
		secGroup = os.networking().securitygroup().create(secGroup);
		//Create rules within security group
	}

	//Create firewall for SSH use
	private SecurityGroup createSSHFirewall(OSClientV2 os) {

		SecurityGroup secGroup = Builders.securityGroup().name("Generated SSH Firewall").build();
		secGroup = os.networking().securitygroup().create(secGroup);
		//Create rules within the security group
		SecurityGroupRule sshRule = Builders.securityGroupRule().securityGroupId(secGroup.getId()).direction("ingress")
				.portRangeMin(22).portRangeMax(22).protocol("TCP").build();
		os.networking().securityrule().create(sshRule);

		return secGroup;
	}
	
	public Firewall getConfig(String firewallKey) {
		Iterator<Firewall> iterator = Globals.firewalls.iterator();

		while (iterator.hasNext()) {
			Firewall currentFirewall = iterator.next();
			if (currentFirewall.getName().equals(firewallKey))
				return currentFirewall;

		}
		return null;
	}

	//Check VM metadata for firewall key
	private String checkForKey(OSClientV2 os, String UUID) {

		Server server = os.compute().servers().get(UUID);
		String keyName = "firewall";
		String defaultValue = "default";
		Map<String, String> metadata = server.getMetadata();
		String value = metadata.get(keyName);
		LOGGER.info("Metadata Key value: " +value);

		if (value == null || value.equals(""))
			return defaultValue;
		else
			return value;
	}

}

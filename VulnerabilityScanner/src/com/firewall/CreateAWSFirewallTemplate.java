package com.firewall;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;

import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.AuthorizeSecurityGroupIngressRequest;
import com.amazonaws.services.ec2.model.CreateSecurityGroupRequest;
import com.amazonaws.services.ec2.model.CreateSecurityGroupResult;
import com.amazonaws.services.ec2.model.DescribeInstancesResult;
import com.amazonaws.services.ec2.model.DescribeSecurityGroupsRequest;
import com.amazonaws.services.ec2.model.DescribeSecurityGroupsResult;
import com.amazonaws.services.ec2.model.DescribeTagsRequest;
import com.amazonaws.services.ec2.model.DescribeTagsResult;
import com.amazonaws.services.ec2.model.Filter;
import com.amazonaws.services.ec2.model.Instance;
import com.amazonaws.services.ec2.model.IpPermission;
import com.amazonaws.services.ec2.model.ModifyInstanceAttributeRequest;
import com.amazonaws.services.ec2.model.Reservation;
import com.amazonaws.services.ec2.model.Tag;
import com.amazonaws.services.ec2.model.TagDescription;
import com.global.Globals;
import com.model.Firewall;
import com.model.FirewallRule;

public class CreateAWSFirewallTemplate {
	private static Logger LOGGER = LogManager.getLogger(CreateAWSFirewallTemplate.class);

	private final String AWSendpoint = Globals.AWSEndpoint;
	private final String AWSAccessKey = Globals.AWSAccessKey;
	private final String AWSSecretKey = Globals.AWSSecretKey;
	private final String AWSSSHKey = Globals.AWSSSHKey;

	private AmazonEC2Client ec2;
	DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	Date date = new Date();

	public void CreateAWSFirewallTemplate(String UUID) {
		LOGGER.info("AWS VM UUID: " + UUID);
		// Authenticate with Amazon EC2 API
		AWSCredentials credentials = new BasicAWSCredentials(AWSAccessKey, AWSSecretKey);
		ec2 = new AmazonEC2Client(credentials);
		ec2.setEndpoint(AWSendpoint);

		// Get VM (instance) details
		Instance vmInstance = getInstance(UUID);

		if (vmInstance == null) {
			LOGGER.error("Instance not found");
			return;
		}

		// Get firewall key value (if it exists) from the VM
		String firewallValue = getFirewallValue(vmInstance);
		LOGGER.info("AWS Firewall Tag Value: " + firewallValue);

		// Create new security group on EC2
		String secGroupID = createFirewall(ec2, firewallValue);

		// Get corresponding firewall config using firewall key value
		Firewall firewall = getConfig(firewallValue);

		LOGGER.info("Firewall config: " + firewall.getName());

		// Apply the new firewall rules to the created security group
		modifySecGroup(secGroupID, firewall, ec2);

		ModifyInstanceAttributeRequest modifyInstance = new ModifyInstanceAttributeRequest();
		modifyInstance.setInstanceId(UUID);
		modifyInstance.getGroups().add(secGroupID);
		ec2.modifyInstanceAttribute(modifyInstance);

	}

	// Method to retrieve VM details
	public Instance getInstance(String UUID) {

		DescribeInstancesResult insResult = ec2.describeInstances();
		for (Reservation reservation : insResult.getReservations()) {
			for (Instance instance : reservation.getInstances()) {

				if (instance.getInstanceId().equals(UUID))
					return instance;
			}
		}
		return null;
	}

	// Method to get firewall key value applied to the VM
	private String getFirewallValue(Instance instance) {

		String result = "default";
		ArrayList<Tag> tags = (ArrayList<Tag>) instance.getTags();

		Iterator<Tag> tagIterator = tags.iterator();

		while (tagIterator.hasNext()) {

			Tag currentTag = tagIterator.next();
			if (currentTag.getKey().toLowerCase().equals("firewall"))
				result = currentTag.getValue();
			break;
		}
		return result;
	}

	// Method to create the new security group on EC2
	private String createFirewall(AmazonEC2Client ec2, String firewallValue) {

		String firewallName = "Generated " + firewallValue + " Firewall " + dateFormat.format(date);
		CreateSecurityGroupRequest csgr = new CreateSecurityGroupRequest();
		csgr.withGroupName(firewallName).withDescription("test");

		CreateSecurityGroupResult createSecurityGroupResult = ec2.createSecurityGroup(csgr);
		String secGroupID = createSecurityGroupResult.getGroupId();

		return secGroupID;

	}

	// Method to add firewall rules to security group
	public void modifySecGroup(String secGroupID, Firewall firewall, AmazonEC2Client ec22) {

		DescribeSecurityGroupsRequest securityRequest = new DescribeSecurityGroupsRequest();
		DescribeSecurityGroupsResult securityDescription = ec22.describeSecurityGroups(securityRequest);
		System.out.println(securityDescription.getSecurityGroups());
		List newIp = new ArrayList();
		newIp.add("0.0.0.0/0");
		addNewPermissions(newIp, firewall, secGroupID);
	}

	/*
	 * Method to create a new permission (rule) to be applied to the security
	 * group
	 */
	private IpPermission createPermission(List ips, FirewallRule firewallRule) {

		IpPermission permission = new IpPermission();

		permission.setIpProtocol(firewallRule.getProtocol().toLowerCase());
		permission.setFromPort(firewallRule.getPort());
		permission.setToPort(firewallRule.getPort());
		permission.setIpRanges(ips);

		return permission;
	}

	// Use EC2 API to add rules to the created security group
	public void addNewPermissions(List ips, Firewall firewall, String securityGroup) {

		List permissions = new ArrayList();

		/*
		 * Iterate over the firewall rules and create them as security group
		 * permissions
		 */
		for (int i = 0; i < firewall.getRules().length; i++) {
			FirewallRule currentFirewallRule = firewall.getRules()[i];
			permissions.add(createPermission(ips, currentFirewallRule));

			LOGGER.info(permissions.toString());
		}

		LOGGER.info("Security Group ID: " + securityGroup);

		// Authorise the change to the security group through the EC2 API
		AuthorizeSecurityGroupIngressRequest request = new AuthorizeSecurityGroupIngressRequest();
		request.setGroupId(securityGroup);
		request.setIpPermissions(permissions);

		try {
			this.ec2.authorizeSecurityGroupIngress(request);

		} catch (Exception e) {

			System.out.println(e.getMessage());
		}
	}

	/* Get loaded firewall config which corresponds with the firewall key */
	public Firewall getConfig(String firewallKey) {
		Iterator<Firewall> iterator = Globals.firewalls.iterator();

		while (iterator.hasNext()) {
			Firewall currentFirewall = iterator.next();
			if (currentFirewall.getName().equals(firewallKey))
				return currentFirewall;

		}
		return null;
	}

}
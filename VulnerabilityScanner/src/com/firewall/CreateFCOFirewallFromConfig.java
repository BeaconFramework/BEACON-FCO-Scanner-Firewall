package com.firewall;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import com.extl.jade.user.ExtilityException;
import com.extl.jade.user.FirewallConnectionState;
import com.extl.jade.user.FirewallProtocol;
import com.extl.jade.user.FirewallRule;
import com.extl.jade.user.FirewallRuleAction;
import com.extl.jade.user.FirewallRuleDirection;
import com.extl.jade.user.FirewallTemplate;
import com.extl.jade.user.IpType;
import com.extl.jade.user.Job;
import com.extl.jade.user.ResourceType;
import com.extl.jade.user.UserAPI;
import com.extl.jade.user.UserService;
import com.global.Globals;
import com.model.Firewall;
import com.scanner.FCOTokenGenerator;
import com.scanner.FCOVMDetails;

public class CreateFCOFirewallFromConfig {

	private static Logger LOGGER = LogManager.getLogger(CreateFCOFirewallFromConfig.class);

	public void createFirewall(String serverUUID, String emailID, String IP, String firewallKey)
			throws MalformedURLException {
		LOGGER.info("In FCO Firewall create");
		String fcoendpoint = Globals.FCOUserEndpoint;
		LOGGER.info(fcoendpoint);

		// Get details of target VM
		FCOVMDetails vmdetails = new FCOVMDetails();
		vmdetails.vmdetails(serverUUID);
		LOGGER.info("Back in FCO Firewall create");
		String clusterUUID = vmdetails.CLUSTERUUID;
		String vdcUUID = vmdetails.VDCUUID;
		LOGGER.info("ClusterUUID: " + clusterUUID + "VDCUUID:" + vdcUUID);

		// Generate token in order to apply firewall
		FCOTokenGenerator tokengenertor = new FCOTokenGenerator();
		try {
			tokengenertor.tokenGenerator(serverUUID);
		} catch (com.extl.jade.admin.ExtilityException e1) {
			LOGGER.error("Unable to get token for user");
		}
		URL url = null;
		LOGGER.info("Starting FCO Firewall template create");

		url = new URL(com.extl.jade.user.UserAPI.class.getResource("."), fcoendpoint);

		// Get the UserAPI
		UserAPI api = new UserAPI(url, new QName("http://extility.flexiant.net", "UserAPI"));
		// and set the service port on the service
		UserService service = api.getUserServicePort();

		// Get the binding provider
		BindingProvider portBP = (BindingProvider) service;

		// and set the service endpoint
		portBP.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, fcoendpoint);

		// and the caller's authentication details and password
		portBP.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, tokengenertor.tokenID);
		portBP.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, "");

		// Create a firewall template and set required values
		FirewallTemplate firewallTemplate = templateCreator(firewallKey);

		// Set FCO platform details for the firewall template
		firewallTemplate.setClusterUUID(clusterUUID);
		firewallTemplate.setResourceName(firewallKey + " template");
		firewallTemplate.setResourceType(ResourceType.FIREWALL_TEMPLATE);
		firewallTemplate.setVdcUUID(vdcUUID);
		firewallTemplate.setType(IpType.IPV_4);

		try {
			DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
			Job job = service.createFirewallTemplate(firewallTemplate, null);
			job.setStartTime(datatypeFactory.newXMLGregorianCalendar(new GregorianCalendar()));
			// Wait for the server to be created
			Job response = service.waitForJob(job.getResourceUUID(), true);
			if (response.getErrorCode() == null) {
				LOGGER.info("Firewall template created successfully");
				// Apply the firewall to the server using the UUID
				ApplyFCOFirewallTemplate applyFirewall = new ApplyFCOFirewallTemplate();
				applyFirewall.applyfirewall(job.getItemUUID(), IP, tokengenertor.tokenID);
			} else {
				LOGGER.error("Failed to create Firewall. Error: " + response.getErrorCode());
			}
		} catch (ExtilityException | DatatypeConfigurationException e) {
			LOGGER.error("Exception in create firewall: " + e.getMessage());
		}
	}

	// Create FCO Firewall Template
	public FirewallTemplate templateCreator(String firewallKey) {

		FirewallTemplate firewallTemplate;
		Firewall firewall = getConfig(firewallKey);

		if (firewall != null) {

			firewallTemplate = createTemplate(firewall);
			LOGGER.info("Firewall template created");
			return firewallTemplate;
		}

		else
			return null;
	}

	// Create firewall template
	public FirewallTemplate createTemplate(Firewall firewall) {

		FirewallTemplate firewallTemplate = new FirewallTemplate();
		firewallTemplate.setDefaultInAction(FirewallRuleAction.REJECT);
		firewallTemplate.setDefaultOutAction(FirewallRuleAction.ALLOW);
		List<FirewallRule> firewallRuleList = firewallTemplate.getFirewallInRuleList();

		// Iterate over the firewall rules
		for (int i = 0; i < firewall.getRules().length; i++) {

			FirewallRule currentRule = new FirewallRule();
			currentRule = allowPortRule(firewall.getRules()[i].getPort(), firewall.getRules()[i].getDirection());
			firewallRuleList.add(currentRule);
		}
		return firewallTemplate;

	}

	public FirewallTemplate allowAllTemplateCreator(FirewallTemplate firewallTemplate) {

		// Allow all in/out requests
		firewallTemplate.setDefaultInAction(FirewallRuleAction.REJECT);
		firewallTemplate.setDefaultOutAction(FirewallRuleAction.ALLOW);

		return firewallTemplate;
	}

	// Helper method to set up an inbound firewall rule
	public FirewallRule allowPortRule(int portnumber, String direct) {

		FirewallRule firewallIn = new FirewallRule();
		firewallIn.setName("Test");

		String directionStr = direct.toLowerCase();

		firewallIn.setAction(FirewallRuleAction.ALLOW);
		firewallIn.setConnState(FirewallConnectionState.ALL);

		//Check if rule is to be inbound or outbound
		if (directionStr.equals("inbound"))
			firewallIn.setDirection(FirewallRuleDirection.IN);
		if (directionStr.equals("outbound"))
			firewallIn.setDirection(FirewallRuleDirection.OUT);
		firewallIn.setIpAddress("");
		firewallIn.setProtocol(FirewallProtocol.ANY);
		firewallIn.setRemotePort(portnumber);
		return firewallIn;
	}

	public Firewall getConfig(String firewallKey) {
		Iterator<Firewall> iterator = Globals.firewalls.iterator();

		while (iterator.hasNext()) {
			Firewall currentFirewall = iterator.next();
			if (currentFirewall.getName().equals(firewallKey))
				return currentFirewall;

		}
		return null;
	}
}
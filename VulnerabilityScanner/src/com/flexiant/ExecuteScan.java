package com.flexiant;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.log4j.Level;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;

/**
 * This runnable runs a scan on a VM and gets the report. The report obtained is
 * stored as a Document and is emailed to the user as an attachment.
 * 
 * @author mramannavar
 *
 */
public class ExecuteScan implements Runnable {

	protected static String PATH_TO_REPORTS = "/home/reports";
	private static Logger LOGGER = LogManager.getLogger(ExecuteScan.class);
	private Request request = null;

	// Store the report in the same location with name - IP.xml
	private String storeReport(Document xml, String ip, String cloud) {

		// Removed date time element for testing
		SimpleDateFormat dateFormatYear = new SimpleDateFormat("DD-MM-YYYY");
		SimpleDateFormat dateFormatTime = new SimpleDateFormat("HH-mm-ss");
		Date date = new Date();
		String filePath = PATH_TO_REPORTS + "/" + cloud + "/" + dateFormatYear.format(date) + "/"
				+ dateFormatTime.format(date) + "/" + ip + ".xml";
		LOGGER.info("Report path: " + filePath);
		try {
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(xml);
			File dirs = new File(PATH_TO_REPORTS + "/" + cloud + "/" + dateFormatYear.format(date) + "/"
					+ dateFormatTime.format(date));
			dirs.mkdirs();
			StreamResult result = new StreamResult(new File(filePath));
			transformer.transform(source, result);

		} catch (TransformerConfigurationException e) {
			e.printStackTrace();
		} catch (TransformerException e) {
			e.printStackTrace();
		}
		return filePath;
	}

	public ExecuteScan(Request request) {
		this.request = request;
	}

	@Override
	public void run() {

		Scanner scanner = new Scanner(request);
		try {
			// Begin the scan
			String reportId = scanner.startScanning();
			if (null != reportId) {
				Document xmlDoc = scanner.getReport(reportId);
				LOGGER.info("XML document generated");

				// Backup the report as an XML file on the scanner side
				String fileName = storeReport(xmlDoc, request.getIP(), request.getCloud().name());
				EmailSystem es = new EmailSystem();
				es.sendTaskSuccessEmail(request.getServerUUID(), fileName, request.getIP(), request.getEmailID());
				LOGGER.info("After Email sent before Switch");

				/*
				 * Apply a firewall to the VM directly through the platform it
				 * runs on
				 */
				switch (request.getCloud()) {
				case FLEX:
					LOGGER.info("Flex firewall create code");
					// Check the firewall requests hashmap for the VM IP
					String firewallKey = FirewallRequests.firewallRequests.get(request.getIP());
					if (firewallKey != null) {
						/*
						 * If the application has received a firewall key for
						 * the VM, use it when creating the firewall
						 */
						LOGGER.info("Firewall key: " + firewallKey);
						CreateFCOFirewallTemplate fcoFirewallCreate = new CreateFCOFirewallTemplate();
						fcoFirewallCreate.createFirewall(request.getServerUUID(), request.getEmailID(), request.getIP(),
								firewallKey);
						//Remove the firewall key from the hashmap
						FirewallRequests.firewallRequests.remove(request.getIP());
						break;
					} else {
						/*
						 * If no firewall key was found then apply a default
						 * template which can be edited by the user
						 */
						LOGGER.log(Level.INFO, "Firewall key not found, applying default template");
						CreateFCOFirewallTemplate fcofirewallcreate = new CreateFCOFirewallTemplate();
						fcofirewallcreate.createFirewall(request.getServerUUID(), request.getEmailID(), request.getIP(),
								"default");
						break;
					}
				case OPEN_STACK:
					LOGGER.info("Creating Openstack firewall");
					// Create firewall template on Openstack platform
					CreateOpenstackFirewallTemplate openstackFirewallCreate = new CreateOpenstackFirewallTemplate();
					openstackFirewallCreate.createFirewall(request.getServerUUID());
					break;
				case OPEN_NEBULA:
					//Create firewall template on Open Nebula
					LOGGER.log(Level.INFO, "Editing Open Nebula Security Group");
					CreateOpenNebulaFirewallTemplate openNebulaFirewallCreate = new CreateOpenNebulaFirewallTemplate();
					openNebulaFirewallCreate.editSecurityGroup(request.getServerUUID(), request.getEmailID());
					break;
				case NONE:
					break;

				default:
					LOGGER.error("Unable to determine which cloud sent request");
					break;
				}
			} else {
				LOGGER.error("The report could not be generated as the task did not complete");
				EmailSystem es = new EmailSystem();
				es.sendTaskFailedEmail(request.getServerUUID(), request.getIP(), request.getEmailID());
			}
		} catch (ScannerException e) {
			LOGGER.error("Something went wrong in scanner", e);

		} catch (InterruptedException e) {
			LOGGER.error("Something went wrong with the scanner", e);

		} catch (IOException e) {
			LOGGER.error("Failed to get the report", e);
		}
	}
}

package com.flexiant;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.openstack4j.api.Builders;
import org.openstack4j.api.OSClient.OSClientV2;
import org.openstack4j.model.network.SecurityGroup;
import org.openstack4j.model.network.SecurityGroupRule;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.ec2.AmazonEC2;
import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.AuthorizeSecurityGroupIngressRequest;
import com.amazonaws.services.ec2.model.DescribeSecurityGroupsRequest;
import com.amazonaws.services.ec2.model.DescribeSecurityGroupsResult;
import com.amazonaws.services.ec2.model.DescribeTagsRequest;
import com.amazonaws.services.ec2.model.DescribeTagsResult;
import com.amazonaws.services.ec2.model.Filter;
import com.amazonaws.services.ec2.model.IpPermission;
import com.amazonaws.services.ec2.model.Tag;
import com.amazonaws.services.ec2.model.TagDescription;



public class CreateAWSFirewallTemplate {
	private static Logger LOGGER = LogManager.getLogger(CreateAWSFirewallTemplate.class);
	
	private final String AWSendpoint = Globals.AWSEndpoint;
	private final String AWSAccessKey = Globals.AWSAccessKey;
	private final String AWSSecretKey = Globals.AWSSecretKey;
	private final String AWSSSHKey = Globals.AWSSSHKey;

    private AmazonEC2 ec2;
        
    public void CreateAWSFirewallTemplate(String UUID) {
		LOGGER.info("AWS VM UUID: " + UUID);
		AWSCredentials credentials = new BasicAWSCredentials(AWSAccessKey, AWSSecretKey);
        ec2 = new AmazonEC2Client(credentials);
        ec2.setEndpoint(AWSendpoint);
        List<TagDescription> key = checkForKey(UUID,ec2);
        createFirewallFromKey(key,ec2);
    }
    
    //TODO Test this method for return values
    private List<TagDescription> checkForKey(String uUID, AmazonEC2 ec2) {
    	DescribeTagsRequest describeTagsRequest = new DescribeTagsRequest().withFilters(
    			new Filter("resource-id", Collections.singletonList(uUID)),
    			new Filter("resource-type", Collections.singletonList("instance")));
    			
    	DescribeTagsResult tagDescription = ec2.describeTags(describeTagsRequest);
        System.out.print(tagDescription.getTags());
		return tagDescription.getTags();
		
	}

	private SecurityGroup createFirewallFromKey(List<TagDescription> key, AmazonEC2 ec2) {

		//Check to see if key corresponds to templates
		if (key.contains("default"))
			return createDefaultFirewall(ec2);
		if (key.contains("mysql"))
			return createMySQLFirewall(ec2);
		if (key.contains("ssh"))
			return createSSHFirewall(ec2);
		if (key.contains("email"))
			return createEmailFirewall(ec2);
		if (key.contains("web server"))
			return createWebServerFirewall(ec2);
		if (key.contains("telnet"))
			return createTelnetFirewall(ec2);

		return null;
	}
    
    private SecurityGroup createMySQLFirewall(AmazonEC2 ec2) {
    	 
    	List Ips = new ArrayList();
         Ips.add("0.0.0.0");     	 
         IpPermission permission = new IpPermission();
         permission.setIpProtocol("tcp");
         permission.setFromPort(22);
         permission.setToPort(22);
         permission.setIpRanges(Ips);
         List Finalpermissions = new ArrayList();
         Finalpermissions.add(permission);

         //Get Security group
         
         AuthorizeSecurityGroupIngressRequest request = new AuthorizeSecurityGroupIngressRequest();
         request.setGroupName("default");
        // request.setGroupId(securityGroup);
         request.setIpPermissions(Finalpermissions);

         try {
             
             this.ec2.authorizeSecurityGroupIngress(request);
             
         } catch (Exception e) {
             
             System.out.println(e.getMessage());
         }
		return null;
	}

	private SecurityGroup createTelnetFirewall(AmazonEC2 ec2) {

		List Ips = new ArrayList();
        Ips.add("0.0.0.0");     	 
        IpPermission permission = new IpPermission();
        permission.setIpProtocol("tcp");
        permission.setFromPort(23);
        permission.setToPort(23);
        permission.setIpRanges(Ips);
        List Finalpermissions = new ArrayList();
        Finalpermissions.add(permission);

        //Get Security group
        
        AuthorizeSecurityGroupIngressRequest request = new AuthorizeSecurityGroupIngressRequest();
        request.setGroupName("default");
       // request.setGroupId(securityGroup);
        request.setIpPermissions(Finalpermissions);

        try {
            
            this.ec2.authorizeSecurityGroupIngress(request);
            
        } catch (Exception e) {
            
            System.out.println(e.getMessage());
        }
		return null;
	}

	private SecurityGroup createWebServerFirewall(AmazonEC2 ec2) {
		// TODO Auto-generated method stub
		return null;
	}

	private SecurityGroup createEmailFirewall(AmazonEC2 ec2) {
		// TODO Auto-generated method stub
		return null;
	}

	private SecurityGroup createSSHFirewall(AmazonEC2 ec2) {
		// TODO Auto-generated method stub
		return null;
	}

	private SecurityGroup createDefaultFirewall(AmazonEC2 ec2) {
		// TODO Auto-generated method stub
		return null;
	}

   
 
}
package com.flexiant;

import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.xml.parsers.*;

import org.apache.log4j.Level;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * Class that interacts with the Scanner and defines all the Scanner
 * functionalities
 * 
 * @author mramannavar
 *
 */
class Scanner extends ExecuteShellCommand {
	// Login parameters for scanner
	static final String SCANNER_USER = "admin";
	static final String SCANNER_PWD = "openvas";
	// Format ID
	static final String XML_FORMAT_ID = "5057e5cc-b825-11e4-9d0e-28d24461215b";
	static Request request;
	static final int SSHPort = 22;

	private static Logger LOGGER = LogManager.getLogger(Scanner.class);
	DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	Date date = new Date();

	Scanner(Request request) {
		Scanner.request = request;
	}

	/**
	 * This method puts together: create target, create task and start task
	 * commands. It starts a scan on the scanner and waits for the scan to
	 * complete.
	 * 
	 * @return
	 * @throws InterruptedException
	 * @throws IOException
	 * @throws Exception
	 *             If one of the commands fails, the exception is thrown.
	 */
	String startScanning() throws ScannerException {
		String createTargetResp;
		try {
			// Create credential set for VM
			String createCredentialResp = createCredential();
			if (!createCredentialResp.equals("No username")) {
				String credentialIDResp = parseResponse(createCredentialResp);
				createTargetResp = createTargetWithCredential(credentialIDResp);
			} else {
				// Create the target VM to be scanned
				createTargetResp = createTarget();
			}

			// Get created target ID by parsing response text
			String targetID = parseResponse(createTargetResp);
			// Create scanner task for the target VM
			String createTaskResp = createTask(targetID);
			// Get created task ID from response
			String taskID = parseResponse(createTaskResp);
			// Launch target using task ID
			String reportIDResp = startTask(taskID);
			// Get generated report ID from response
			String reportID = parseResponse(reportIDResp);

			if (waitForReport(taskID, reportID)) {
				return reportID;
			}
		} catch (IOException | InterruptedException e) {
			LOGGER.fatal("Shell encountered an error: ", e);
		}
		return null;
	}

	private boolean waitForReport(String taskID, String reportID) throws ScannerException {
		boolean complete = false;
		int count = 0;

		do {
			try {
				LOGGER.log(Level.INFO, "========================================================");
				LOGGER.log(Level.INFO, "WAITING for Task to complete ");
				// Wait for 2 minutes before checking the status of the task -
				// giving it a chance to finish.
				Thread.sleep(120000);
				String taskResponse;
				taskResponse = getTasks(taskID);
				if (taskResponse.length() == 0) {
					throw new ScannerException("The get tasks response is empty");
				}

				// Check for "OK"/"ACCEPTED" status
				if (checkStatus(taskResponse)) {
					String[] temp = taskResponse.split("<status>");
					String[] temp1 = temp[1].split("</status>");
					LOGGER.log(Level.INFO, "Task status: " + temp1[0]);
					if (temp1[0].compareToIgnoreCase("Done") == 0) {
						complete = true; // Task has finished
						LOGGER.log(Level.DEBUG, "The task has finished running - complete - " + complete);
					}
				}

			} catch (IOException | InterruptedException e) {
				LOGGER.fatal("Shell encountered an error: ", e);
			}
			count++;

		} while ((complete == false) && (count != 12)); // Maximum time given
														// for
		return complete;
	}

	private boolean checkStatus(String response) {
		String[] respArr = response.split(" ");
		String status = null;
		boolean success = false;

		for (String str : respArr) {
			// Get the status from the response
			if (str.contains("status=")) {
				String[] statusArr = str.split("=");
				status = statusArr[1].substring(1, 4);
				LOGGER.log(Level.INFO, "The status is " + status);
			}
		}

		int statusCode = Integer.parseInt(status);

		if (200 == statusCode || 201 == statusCode || 202 == statusCode) {
			success = true;
			LOGGER.info("Scanner response status is OK");
		} else {
			LOGGER.fatal("Command Error Status: " + status);
		}
		return success;
	}

	/**
	 * Parses the response received from the scanner. Checks the status and
	 * retrieves the ID.
	 * 
	 * @param response
	 * @return
	 * @throws ScannerException
	 *             If the status is not 201 0r 202, an Exception is thrown
	 */
	private String parseResponse(String response) throws ScannerException {
		if (response.length() == 0) {
			throw new ScannerException("The response is empty");
		}

		String[] respArr = response.split(" ");
		String id = null;

		// Check for "OK"/"ACCEPTED" status
		if (checkStatus(response)) {
			if (response.contains("<report_id>")) {
				String[] tempArr1 = response.split("<report_id>");
				String[] tempArr2 = tempArr1[1].split("</report_id>");
				return tempArr2[0];
			}
			// Retrieve the ID
			for (String str : respArr) {
				if (str.contains("id=")) {
					String[] idArr = str.split("=");
					id = idArr[1];
					LOGGER.log(Level.INFO, "The result ID is " + id);
				}
			}
		} else {
			// Other status received.
			throw new ScannerException("The command executed with errors. Response received: " + response);
		}
		return id;
	}

	// Create a set of credentials for a new VM, to be used with a vulnerability
	// scan
	private String createCredential() throws IOException, InterruptedException {
		if (!request.hasUsername()) {
			String response = "No username";
			LOGGER.log(Level.INFO, "No username received");
			return response;
		}

		StringBuilder builder = new StringBuilder();
		builder.append("<create_lsc_credential>");
		builder.append("<name>");
		builder.append(request.getIP() + " " + dateFormat.format(date));
		builder.append("-");
		builder.append("credential</name>");
		builder.append("<login>");
		builder.append(request.getUsername());
		builder.append("</login>");
		builder.append("<password>");
		builder.append(request.getPassword());
		builder.append("</password>");
		builder.append("</create_lsc_credential>");

		String cmd = buildCommand("-X", builder.toString());
		LOGGER.log(Level.INFO, "create credential command built: " + cmd);
		String response = executeCommand(cmd);
		LOGGER.log(Level.INFO, "create credential response: " + response);
		if (response.length() == 0) {
			LOGGER.fatal("No Response received from the openVAS scanner");
		}
		return response;
	}

	// Create a target for a vulnerability scan, a target represents a VM to be
	// scanned given its IP
	private String createTarget() throws IOException, InterruptedException {
		StringBuilder builder = new StringBuilder();
		builder.append("<create_target>");
		builder.append("<name>");
		builder.append(request.getIP() + " " + dateFormat.format(date));
		builder.append("-");
		builder.append("target</name>");
		builder.append("<hosts>");
		builder.append(request.getIP());
		builder.append("</hosts>");
		builder.append("</create_target>");

		String cmd = buildCommand("-X", builder.toString());
		String response = executeCommand(cmd);
		LOGGER.log(Level.INFO, "create target command built: " + cmd);
		LOGGER.log(Level.INFO, "create target response: " + response);
		if (response.length() == 0) {
			LOGGER.fatal("No Response received from the Scanner");
		}
		return response;
	}

	private String createTargetWithCredential(String credentialId) throws IOException, InterruptedException {
		StringBuilder builder = new StringBuilder();
		builder.append("<create_target>");
		builder.append("<name>");
		builder.append(request.getIP() + " " + dateFormat.format(date));
		builder.append("-");
		builder.append("target</name>");
		builder.append("<hosts>");
		builder.append(request.getIP());
		builder.append("</hosts>");
		builder.append("<ssh_lsc_credential id=");
		builder.append(credentialId);
		builder.append(">");
		builder.append("<port>");
		builder.append(SSHPort);
		builder.append("</port>");
		builder.append("</ssh_lsc_credential>");
		builder.append("</create_target>");

		String cmd = buildCommand("-X", builder.toString());
		String response = executeCommand(cmd);
		LOGGER.log(Level.INFO, "create target command built: " + cmd);
		LOGGER.log(Level.INFO, "create target response: " + response);
		if (response.length() == 0) {
			LOGGER.fatal("No Response received from the Scanner");
		}
		return response;
	}

	// Create a task (a scan) for a target (a VM)
	private String createTask(String targetId) throws IOException, InterruptedException {
		StringBuilder builder = new StringBuilder();
		builder.append("<create_task>");
		builder.append("<name>");
		builder.append(request.getIP() + " " + dateFormat.format(date));
		builder.append("-");
		builder.append("task</name>");
		// Config ID represents the type of scan to be performed (full, deep
		// etc.)
		builder.append("<config id=");

		//Faster scan
		builder.append("\"daba56c8-73ec-11df-a475-002264764cea\"/>");

		//Full scan
		//builder.append("\"708f25c4-7489-11df-8094-002264764cea\"/>");

		// Target ID is the target representing the VM to be scanned
		builder.append("<target id=");
		builder.append(targetId);
		builder.append("/>");
		builder.append("</create_task>");

		String cmd = buildCommand("-X", builder.toString());
		LOGGER.info("create task command built: " + builder.toString());
		String response = executeCommand(cmd);
		LOGGER.info("create task response: " + response);
		return response;
	}

	// Launch a created task
	private String startTask(String taskId) throws IOException, InterruptedException {
		StringBuilder builder = new StringBuilder();
		builder.append("<start_task ");
		builder.append("task_id=");
		builder.append(taskId);
		builder.append("/>");

		String cmd = buildCommand("-X", builder.toString());
		LOGGER.log(Level.INFO, "start task command built: " + builder.toString());
		String response = executeCommand(cmd);
		LOGGER.log(Level.INFO, "start task response: " + response);
		return response;
	}

	Document getReport(String reportId) throws IOException, InterruptedException {
		StringBuilder builder = new StringBuilder();
		builder.append("<get_reports");
		builder.append(" report_id=");
		builder.append("\"");
		builder.append(reportId);
		builder.append("\"");
		builder.append(" format_id=");
		builder.append("\"");
		builder.append(XML_FORMAT_ID);
		builder.append("\"/>");

		String cmd = buildCommand("-X", builder.toString());
		LOGGER.log(Level.INFO, "Waiting for report to generate");
		Thread.sleep(60000);
		LOGGER.log(Level.INFO, "get report command built: " + builder.toString());

		try {
			LOGGER.log(Level.INFO, "Executing get report." );
			String response = executeCommand(cmd);
			LOGGER.log(Level.INFO, "get report response: " + response);

			if (checkStatus(response)) {
				try {
					return convertToXML(response);
				} catch (SAXException e) {
					LOGGER.fatal("Could not convert the response to XML doc ", e);
				} catch (ParserConfigurationException e) {
					LOGGER.fatal("Could not convert the response to XML doc ", e);
				}
			}
			return null;
		} catch (Exception e) {
			LOGGER.log(Level.ERROR, "Report not received");
			return null;
		}
	}

	private String getTasks(String taskID) throws IOException, InterruptedException {
		StringBuilder builder = new StringBuilder();
		builder.append("<get_tasks");
		builder.append(" task_id=");
		builder.append(taskID);
		builder.append("/>");
		LOGGER.info("get tasks input to buildCommand method: " + builder.toString());
		String cmd = buildCommand("-X", builder.toString());
		LOGGER.info("get tasks command built: " + cmd);
		String response = executeCommand(cmd);
		LOGGER.info("get report response: " + response);
		return response;
	}

	@Override
	String buildCommand(String option, String arg) {
		StringBuilder cmdBuilder = new StringBuilder();
		cmdBuilder.append("omp -u ");
		cmdBuilder.append(SCANNER_USER);
		cmdBuilder.append(" -w ");
		cmdBuilder.append(SCANNER_PWD);
		cmdBuilder.append(" ");
		cmdBuilder.append(option);
		cmdBuilder.append(" '");
		cmdBuilder.append(arg);
		cmdBuilder.append("'");
		return cmdBuilder.toString();
	}

	private Document convertToXML(String report) throws SAXException, ParserConfigurationException, IOException {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();
		return builder.parse(new InputSource(new StringReader(report)));
	}

}

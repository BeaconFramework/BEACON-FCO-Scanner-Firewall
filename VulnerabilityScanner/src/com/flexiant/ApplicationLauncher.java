package com.flexiant;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URISyntaxException;
import java.util.Properties;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

/**
 * As the name suggests this class launches the Application. Instantiates the
 * Log4j2 and spawns threads to listen to socket continuously. Starts the
 * ScanRequestProcessor to process the requests.
 * 
 * @author mramannavar
 *
 */

public class ApplicationLauncher {

	private static Logger LOGGER = LogManager.getLogger(ApplicationLauncher.class);
	// private static String configFile = "log4j2.xml";

	// Once the project is being used by the other partners, the queue length
	// will be increased.
	private static int MAX_QUEUE_LENGTH = 15;
	private static ArrayBlockingQueue<Request> queue = null;
	private static ExecutorService socketThreads = null;
	private static Properties prop;

	private static String configFilename = "scannerConfig.properties";

	// The Log4j2 config xml file is automatically found if placed in the src
	// folder but if something goes wrong
	// use the code below to locate the config file.
	// static {
	// String log4jConfigFile = System.getProperty("user.dir") + File.separator
	// + configFile;
	// System.out.println("User.dir:" + System.getProperty("user.dir"));
	// ConfigurationSource source;
	// try {
	// source = new ConfigurationSource(new FileInputStream(log4jConfigFile));
	// Configurator.initialize(null, source);
	// } catch (FileNotFoundException e) {
	// LOGGER.error("Logging configuration file was not found", e);
	// } catch (IOException e) {
	// LOGGER.error("Error - when trying to obtain the logging configuration
	// file", e);
	// }
	// }

	/*
	 * Method used for locating the path where the executable was launched in
	 * order to get the path of the config file
	 */
	public static String getPath() {
		String decodedPath = new java.io.File(
				ClientSocket.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getAbsolutePath();
		decodedPath = decodedPath.substring(0, decodedPath.lastIndexOf("."));
		decodedPath = decodedPath + System.getProperty("java.class.path");

		int index = decodedPath.lastIndexOf('/');
		decodedPath = decodedPath.substring(0, index);

		decodedPath = decodedPath + "/" + configFilename;
		return decodedPath;
	}

	private static void loadProperties() {
		prop = new Properties();
		InputStreamReader in = null;
		try {

			// Retrieve config file path and load it
			String decodedPath = getPath();
			LOGGER.info("Path: " + decodedPath);

			if (decodedPath.equals("."))
				decodedPath = "/" + configFilename;

			in = new InputStreamReader(new FileInputStream(decodedPath), "UTF-8");
			prop.load(in);
		} catch (IOException e) {
			e.printStackTrace();
			LOGGER.info("Error loading config");
		}
	}

	private static void loadPlatform() {
		String platform = prop.getProperty("platformName");

		if (platform.equals("FCO"))
			Globals.hostPlatform = Clouds.FLEX;
		else if (platform.equals("Openstack"))
			Globals.hostPlatform = Clouds.OPEN_STACK;
		else if (platform.equals("OpenNebula"))
			Globals.hostPlatform = Clouds.OPEN_NEBULA;
		else {
			LOGGER.warn("Error loading platform from config, setting to none");
			Globals.hostPlatform = Clouds.NONE;
		}
	}

	private static void loadOpenstackConfig() {

		Globals.OpenstackCloudUsernameCredential = prop.getProperty("OpenstackCloudUsername");
		Globals.OpenstackCloudPasswordCredential = prop.getProperty("OpenstackCloudPassword");
		Globals.OpenstackCloudAdminUUID = prop.getProperty("OpenstackCloudAdminUUID");
		Globals.OpenstackAdminEndpoint = prop.getProperty("OpenstackAdminEndpoint");
		Globals.OpenstackUserEndpoint = prop.getProperty("OpenstackUserEndpoint");
		Globals.OpenstackSSHKey = prop.getProperty("OpenstackSSHKey");
	}

	private static void loadOpenNebulaConfig() {

		Globals.OpenNebulaCloudUsernameCredential = prop.getProperty("OpenNebulaCloudUsername");
		Globals.OpenNebulaCloudPasswordCredential = prop.getProperty("OpenNebulaCloudPassword");
		Globals.OpenNebulaCloudAdminUUID = prop.getProperty("OpenNebulaCloudAdminUUID");
		Globals.OpenNebulaUserEndpoint = prop.getProperty("OpenNebulaUserEndpoint");
		Globals.OpenNebulaSSHKey = prop.getProperty("OpenNebulaSSHKey");
	}

	/* Method used to load credentials from a config file */
	private static void loadFCOConfig() {

		// Set global variables in order to access them later
		Globals.FCOCloudUsernameCredential = prop.getProperty("FCOCloudUsername");
		Globals.FCOCloudPasswordCredential = prop.getProperty("FCOCloudPassword");
		Globals.FCOCloudAdminUUID = prop.getProperty("FCOCloudAdminUUID");
		Globals.FCOAdminEndpoint = prop.getProperty("FCOAdminEndpoint");
		Globals.FCOUserEndpoint = prop.getProperty("FCOUserEndpoint");
		Globals.FCOSSHKey = prop.getProperty("FCOSSHKey");

		LOGGER.info("FCO Cloud Username: " + Globals.FCOCloudUsernameCredential);

		int passwordLength = Globals.FCOCloudPasswordCredential.length();
		String cloudPassword = "";

		for (int i = 0; i < passwordLength; i++) {
			cloudPassword = cloudPassword + "*";
		}
		LOGGER.info("FCO Cloud password: " + cloudPassword);
		LOGGER.info("FCO Cloud Admin UUID: " + Globals.FCOCloudAdminUUID);
	}

	public static void main(String[] args) throws URISyntaxException {

		loadProperties();
		loadFCOConfig();

		queue = new ArrayBlockingQueue<Request>(MAX_QUEUE_LENGTH);
		socketThreads = Executors.newFixedThreadPool(3);

		LOGGER.debug("The runnables being submitted, ready to read from the socket");
		socketThreads.submit(new SocketListener(Clouds.FLEX, queue));
		socketThreads.submit(new SocketListener(Clouds.OPEN_STACK, queue));
		socketThreads.submit(new SocketListener(Clouds.OPEN_NEBULA, queue));

		LOGGER.info("Launching the a RequestProcessor...");

		FirewallRequests req = new FirewallRequests();

		final ScanRequestProcessor processor = new ScanRequestProcessor(queue);
		processor.processRequests();

		Runtime.getRuntime().addShutdownHook(new Thread() {
			public void run() {
				LOGGER.info("Application Terminated, shutdown hook called.");
				shutdown();
				processor.shutdown();
			}
		});
	}

	public static void shutdown() {
		try {
			socketThreads.shutdown();

			while (!socketThreads.awaitTermination(60, TimeUnit.SECONDS)) {
				LOGGER.info("Awaiting for the threads to finish ...");
			}

			if (!socketThreads.isTerminated()) {
				socketThreads.shutdownNow();
			}
		} catch (InterruptedException e) {
			LOGGER.error("The newFixedThreadPool was interrupted while being shut.", e);
		}
	}
}

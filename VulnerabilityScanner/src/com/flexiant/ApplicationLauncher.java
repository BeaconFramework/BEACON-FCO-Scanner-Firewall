package com.flexiant;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URISyntaxException;
import java.util.Properties;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

/**
 * As the name suggests this class launches the Application. Instantiates the
 * Log4j2 and spawns threads to listen to socket continuously. Starts the
 * ScanRequestProcessor to process the requests.
 * 
 * @author mramannavar
 *
 */

public class ApplicationLauncher {

	private static Logger LOGGER = LogManager.getLogger(ApplicationLauncher.class);
	// private static String configFile = "log4j2.xml";

	// Once the project is being used by the other partners, the queue length
	// will be increased.
	private static int MAX_QUEUE_LENGTH = 15;
	private static ArrayBlockingQueue<Request> queue = null;
	private static ExecutorService socketThreads = null;
	private static Properties prop;

	private static String configFilename = "scannerConfig.properties";

	/*
	 * Method used for locating the path where the executable was launched in
	 * order to get the path of the config file
	 */
	public static String getPath() {
		String decodedPath = new java.io.File(
				ApplicationLauncher.class.getProtectionDomain().getCodeSource().getLocation().getPath())
						.getAbsolutePath();
		decodedPath = decodedPath.substring(0, decodedPath.lastIndexOf("."));
		decodedPath = decodedPath + System.getProperty("java.class.path");

		int index = decodedPath.lastIndexOf('/');
		decodedPath = decodedPath.substring(0, index);

		decodedPath = decodedPath + "/";
		return decodedPath;
	}

	// Read string from file
	static String readFile(String fileName) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(fileName));
		try {
			StringBuilder sb = new StringBuilder();
			String line = br.readLine();

			while (line != null) {
				sb.append(line);
				sb.append("\n");
				line = br.readLine();
			}
			return sb.toString();
		} finally {
			br.close();
		}
	}

	private static void loadProperties() {
		prop = new Properties();
		InputStreamReader in = null;
		try {

			// Retrieve config file path and load it
			String decodedPath = getPath() + configFilename;
			LOGGER.info("Path: " + decodedPath);

			if (decodedPath.equals("."))
				decodedPath = "/" + configFilename;

			in = new InputStreamReader(new FileInputStream(decodedPath), "UTF-8");
			prop.load(in);
			LOGGER.info("Config file loaded");
		} catch (IOException e) {
			e.printStackTrace();
			LOGGER.info("Error loading config");
		}
	}

	// Load key file from file
	public static String loadKeyFile(String keyFile) {
		String res = "";
		try {
			String path = getPath() + keyFile;
			LOGGER.info("Keyfile path: " + path);
			res = readFile(path);
		} catch (IOException e) {
			LOGGER.error("Key file unable to be read.");
		}
		return res;
	}

	// Load openstack variabes from config file
	private static void loadOpenstackConfig() {

		Globals.OpenstackCloudUsernameCredential = prop.getProperty("OpenstackCloudUsername");
		Globals.OpenstackCloudPasswordCredential = prop.getProperty("OpenstackCloudPassword");
		Globals.OpenstackCloudTenant = prop.getProperty("OpenstackCloudTenant");
		Globals.OpenstackEndpoint = prop.getProperty("OpenstackEndpoint");
		Globals.OpenstackSSHKey = prop.getProperty("OpenstackSSHKey");
	}

	// Load open nebula variables from config file
	private static void loadOpenNebulaConfig() {

		Globals.OpenNebulaCloudUsernameCredential = prop.getProperty("OpenNebulaCloudUsername");
		Globals.OpenNebulaCloudPasswordCredential = prop.getProperty("OpenNebulaCloudPassword");
		Globals.OpenNebulaEndpoint = prop.getProperty("OpenNebulaEndpoint");
		Globals.OpenNebulaSSHKey = prop.getProperty("OpenNebulaSSHKey");

	}

	// Load SSH Keys for each platform (if available)
	private static void loadKeys() {

		/*
		 * If the pem file is given as a file, load the private key from the
		 * file. Otherwise, it is assumed the key has been inputted in the
		 * config file
		 */
		Globals.FCOSSHKey = prop.getProperty("FCOSSHKey");
		if (Globals.FCOSSHKey.endsWith(".pem"))
			Globals.FCOSSHKey = loadKeyFile(Globals.FCOSSHKey);

		Globals.OpenstackSSHKey = prop.getProperty("OpenstackSSHKey");
		if (Globals.OpenstackSSHKey.endsWith(".pem"))
			Globals.OpenstackSSHKey = loadKeyFile(Globals.OpenstackSSHKey);

		Globals.OpenNebulaSSHKey = prop.getProperty("OpenNebulaSSHKey");
		if (Globals.OpenNebulaSSHKey.endsWith(".pem"))
			Globals.OpenNebulaSSHKey = loadKeyFile(Globals.OpenNebulaSSHKey);
	}

	/* Method used to load credentials from a config file */
	private static void loadFCOConfig() {

		// Set global variables in order to access them later
		Globals.FCOCloudUsernameCredential = prop.getProperty("FCOCloudUsername");
		Globals.FCOCloudPasswordCredential = prop.getProperty("FCOCloudPassword");
		Globals.FCOCloudAdminUUID = prop.getProperty("FCOCloudAdminUUID");
		Globals.FCOAdminEndpoint = prop.getProperty("FCOAdminEndpoint");
		Globals.FCOUserEndpoint = prop.getProperty("FCOUserEndpoint");
	}

	public static void main(String[] args) throws URISyntaxException {

		//Load properties and ssh keys from the config file
		loadProperties();
		loadKeys();

		loadFCOConfig();
		loadOpenstackConfig();
		loadOpenNebulaConfig();

		queue = new ArrayBlockingQueue<Request>(MAX_QUEUE_LENGTH);
		socketThreads = Executors.newFixedThreadPool(3);

		LOGGER.debug("The runnables being submitted, ready to read from the socket");
		socketThreads.submit(new SocketListener(Clouds.FLEX, queue));
		socketThreads.submit(new SocketListener(Clouds.OPEN_STACK, queue));
		socketThreads.submit(new SocketListener(Clouds.OPEN_NEBULA, queue));

		LOGGER.info("Launching the a RequestProcessor...");

		FirewallRequests req = new FirewallRequests();

		final ScanRequestProcessor processor = new ScanRequestProcessor(queue);
		processor.processRequests();

		Runtime.getRuntime().addShutdownHook(new Thread() {
			public void run() {
				LOGGER.info("Application Terminated, shutdown hook called.");
				shutdown();
				processor.shutdown();
			}
		});
	}

	public static void shutdown() {
		try {
			socketThreads.shutdown();

			while (!socketThreads.awaitTermination(60, TimeUnit.SECONDS)) {
				LOGGER.info("Awaiting for the threads to finish ...");
			}

			if (!socketThreads.isTerminated()) {
				socketThreads.shutdownNow();
			}
		} catch (InterruptedException e) {
			LOGGER.error("The newFixedThreadPool was interrupted while being shut.", e);
		}
	}
}

package com.flexiant;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.GregorianCalendar;
import java.util.List;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import com.extl.jade.user.ExtilityException;
import com.extl.jade.user.FirewallConnectionState;
import com.extl.jade.user.FirewallProtocol;
import com.extl.jade.user.FirewallRule;
import com.extl.jade.user.FirewallRuleAction;
import com.extl.jade.user.FirewallRuleDirection;
import com.extl.jade.user.FirewallTemplate;
import com.extl.jade.user.IpType;
import com.extl.jade.user.Job;
import com.extl.jade.user.ResourceType;
import com.extl.jade.user.UserAPI;
import com.extl.jade.user.UserService;

public class CreateFCOFirewallTemplate {

	private static Logger LOGGER = LogManager.getLogger(CreateFCOFirewallTemplate.class);

	public void createFirewall(String serverUUID, String emailID, String IP, String firewallKey)
			throws MalformedURLException {
		LOGGER.info("In FCO Firewall create");
		String fcoendpoint = Globals.FCOUserEndpoint;
		LOGGER.info(fcoendpoint);

		//Get details of target VM
		FCOVMDetails vmdetails = new FCOVMDetails();
		vmdetails.vmdetails(serverUUID);
		LOGGER.info("Back in FCO Firewall create");
		String clusterUUID = vmdetails.CLUSTERUUID;
		String vdcUUID = vmdetails.VDCUUID;
		LOGGER.info("ClusterUUID: " + clusterUUID + "VDCUUID:" + vdcUUID);

		//Generate token in order to apply firewall
		FCOTokenGenerator tokengenertor = new FCOTokenGenerator();
		try {
			tokengenertor.tokenGenerator(serverUUID);
		} catch (com.extl.jade.admin.ExtilityException e1) {
			LOGGER.error("Unable to get token for user");
		}
		URL url = null;
		LOGGER.info("Starting FCO Firewall template create");

		url = new URL(com.extl.jade.user.UserAPI.class.getResource("."), fcoendpoint);

		// Get the UserAPI
		UserAPI api = new UserAPI(url, new QName("http://extility.flexiant.net", "UserAPI"));
		// and set the service port on the service
		UserService service = api.getUserServicePort();

		// Get the binding provider
		BindingProvider portBP = (BindingProvider) service;

		// and set the service endpoint
		portBP.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, fcoendpoint);

		// and the caller's authentication details and password
		portBP.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, tokengenertor.tokenID);
		portBP.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, "");

		// Create a firewall template and set required values
		FirewallTemplate firewallTemplate = templateCreator(firewallKey);

		//Set FCO platform details for the firewall template
		firewallTemplate.setClusterUUID(clusterUUID);
		firewallTemplate.setResourceName(firewallKey + " template");
		firewallTemplate.setResourceType(ResourceType.FIREWALL_TEMPLATE);
		firewallTemplate.setVdcUUID(vdcUUID);
		firewallTemplate.setType(IpType.IPV_4);

		try {
			DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
			Job job = service.createFirewallTemplate(firewallTemplate, null);
			job.setStartTime(datatypeFactory.newXMLGregorianCalendar(new GregorianCalendar()));
			// Wait for the server to be created
			Job response = service.waitForJob(job.getResourceUUID(), true);
			if (response.getErrorCode() == null) {
				LOGGER.info("Firewall template created successfully");
				// Apply the firewall to the server using the UUID
				ApplyFCOFirewallTemplate applyFirewall = new ApplyFCOFirewallTemplate();
				applyFirewall.applyfirewall(job.getItemUUID(), IP, tokengenertor.tokenID);
			} else {
				LOGGER.error("Failed to create Firewall. Error: " + response.getErrorCode());
			}
		} catch (ExtilityException | DatatypeConfigurationException e) {
			LOGGER.error("Exception in create firewall: " + e.getMessage());
		}
	}

	public FirewallTemplate templateCreator(String firewallKey) {

		FirewallTemplate firewallTemplate = new FirewallTemplate();

		//Check firewall key in order to determine which template to apply
		if (firewallKey.equals("ssh")) {
			firewallTemplate = sshTemplateCreator(firewallTemplate);
		}
		if (firewallKey.equals("mysql")) {
			firewallTemplate = mysqlTemplateCreator(firewallTemplate);
		}
		if (firewallKey.equals("email")) {
			firewallTemplate = emailTemplateCreator(firewallTemplate);
		}
		if (firewallKey.equals("web_server")) {
			firewallTemplate = webServerTemplateCreator(firewallTemplate);
		}
		if (firewallKey.equals("telnet")) {
			firewallTemplate = telnetTemplateCreator(firewallTemplate);
		}
		//If no custom key is found, use the default template
		if (firewallKey.equals("default")) {
			firewallTemplate = allowAllTemplateCreator(firewallTemplate);
		}
		return firewallTemplate;
	}

	public FirewallTemplate allowAllTemplateCreator(FirewallTemplate firewallTemplate) {

		//Allow all in/out requests
		firewallTemplate.setDefaultInAction(FirewallRuleAction.ALLOW);
		firewallTemplate.setDefaultOutAction(FirewallRuleAction.ALLOW);

		return firewallTemplate;
	}

	//Create a firewall for telnet use
	public FirewallTemplate telnetTemplateCreator(FirewallTemplate firewallTemplate) {

		firewallTemplate.setDefaultInAction(FirewallRuleAction.REJECT);
		firewallTemplate.setDefaultOutAction(FirewallRuleAction.ALLOW);
		FirewallRule telnetRule = new FirewallRule();
		int telnetPort = 23;
		telnetRule = allowOutgoingPortRule(telnetPort);
		List<FirewallRule> firewallRuleList = firewallTemplate.getFirewallInRuleList();
		// Adding firewall rule to template
		firewallRuleList.add(telnetRule);
		return firewallTemplate;
	}

	//Create a firewall for http/https and ftp use
	public FirewallTemplate webServerTemplateCreator(FirewallTemplate firewallTemplate) {

		firewallTemplate.setDefaultInAction(FirewallRuleAction.REJECT);
		firewallTemplate.setDefaultOutAction(FirewallRuleAction.ALLOW);
		FirewallRule httpRule = new FirewallRule();
		FirewallRule ftpDataRule = new FirewallRule();
		FirewallRule ftpControlRule = new FirewallRule();
		FirewallRule httpsRule = new FirewallRule();
		int httpPort = 80;
		int ftpDataPort = 20;
		int ftpControlPort = 21;
		int httpsPort = 443;
		httpRule = allowOutgoingPortRule(httpPort);
		ftpDataRule = allowOutgoingPortRule(ftpDataPort);
		ftpControlRule = allowOutgoingPortRule(ftpControlPort);
		httpsRule = allowOutgoingPortRule(httpsPort);
		List<FirewallRule> firewallRuleList = firewallTemplate.getFirewallInRuleList();
		// Adding firewall rules to template
		firewallRuleList.add(httpsRule);
		firewallRuleList.add(ftpControlRule);
		firewallRuleList.add(ftpDataRule);
		firewallRuleList.add(httpRule);
		return firewallTemplate;

	}
	
	//Create a firewall for use with various email protocols
	public FirewallTemplate emailTemplateCreator(FirewallTemplate firewallTemplate) {

		firewallTemplate.setDefaultInAction(FirewallRuleAction.REJECT);
		firewallTemplate.setDefaultOutAction(FirewallRuleAction.ALLOW);
		FirewallRule pop3Rule = new FirewallRule();
		FirewallRule imapRule = new FirewallRule();
		FirewallRule smtpRule = new FirewallRule();
		int pop3Port = 110;
		int smtpPort = 25;
		int imapPort = 143;
		pop3Rule = allowOutgoingPortRule(pop3Port);
		imapRule = allowOutgoingPortRule(imapPort);
		smtpRule = allowOutgoingPortRule(smtpPort);
		List<FirewallRule> firewallRuleList = firewallTemplate.getFirewallInRuleList();
		// Adding firewall rules to template
		firewallRuleList.add(pop3Rule);
		firewallRuleList.add(smtpRule);
		firewallRuleList.add(imapRule);
		return firewallTemplate;
	}

	//Create a firewall for use with MySQL server
	public FirewallTemplate mysqlTemplateCreator(FirewallTemplate firewallTemplate) {

		firewallTemplate.setDefaultInAction(FirewallRuleAction.REJECT);
		firewallTemplate.setDefaultOutAction(FirewallRuleAction.ALLOW);
		FirewallRule sshRule = new FirewallRule();
		FirewallRule mysqlRule1 = new FirewallRule();
		FirewallRule mysqlRule2 = new FirewallRule();
		int sshPort = 22;
		int mysqlPort = 3306;
		int mysqlPort2 = 1433;
		sshRule = allowOutgoingPortRule(sshPort);
		mysqlRule1 = allowOutgoingPortRule(mysqlPort);
		mysqlRule2 = allowOutgoingPortRule(mysqlPort2);
		List<FirewallRule> firewallRulelist = firewallTemplate.getFirewallInRuleList();
		// Adding firewall rules to template
		firewallRulelist.add(sshRule);
		firewallRulelist.add(mysqlRule1);
		firewallRulelist.add(mysqlRule2);
		return firewallTemplate;
	}

	//Create a firewall for use with SSH connection
	public FirewallTemplate sshTemplateCreator(FirewallTemplate firewallTemplate) {

		firewallTemplate.setDefaultInAction(FirewallRuleAction.REJECT);
		firewallTemplate.setDefaultOutAction(FirewallRuleAction.ALLOW);
		FirewallRule sshFirewall = new FirewallRule();
		FirewallRule ftpFirewall = new FirewallRule();
		int sshPort = 22;
		int ftpPort = 21;
		sshFirewall = allowOutgoingPortRule(sshPort);
		ftpFirewall = allowOutgoingPortRule(ftpPort);
		List<FirewallRule> firewallRulelist = firewallTemplate.getFirewallInRuleList();
		// Adding firewall rules to template
		firewallRulelist.add(sshFirewall);
		firewallRulelist.add(ftpFirewall);

		return firewallTemplate;
	}
	
	//Helper method to set up an outgoing firewall rule
	public FirewallRule allowOutgoingPortRule(int portnumber) {

		FirewallRule firewallOut = new FirewallRule();
		firewallOut.setName("Test");
		firewallOut.setAction(FirewallRuleAction.ALLOW);
		firewallOut.setConnState(FirewallConnectionState.ALL);
		firewallOut.setDirection(FirewallRuleDirection.OUT);
		firewallOut.setIpAddress("");
		firewallOut.setProtocol(FirewallProtocol.ANY);
		firewallOut.setRemotePort(portnumber);
		return firewallOut;
	}
}
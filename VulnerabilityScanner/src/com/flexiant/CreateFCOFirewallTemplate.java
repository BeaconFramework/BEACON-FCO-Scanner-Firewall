package com.flexiant;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.GregorianCalendar;
import java.util.List;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import com.extl.jade.user.ExtilityException;
import com.extl.jade.user.FirewallConnectionState;
import com.extl.jade.user.FirewallProtocol;
import com.extl.jade.user.FirewallRule;
import com.extl.jade.user.FirewallRuleAction;
import com.extl.jade.user.FirewallRuleDirection;
import com.extl.jade.user.FirewallTemplate;
import com.extl.jade.user.IpType;
import com.extl.jade.user.Job;
import com.extl.jade.user.ResourceType;
import com.extl.jade.user.UserAPI;
import com.extl.jade.user.UserService;

public class CreateFCOFirewallTemplate {

	private static Logger LOGGER = LogManager.getLogger(CreateFCOFirewallTemplate.class);

	public void createFirewall(String serverUUID, String emailID, String IP, String firewallKey)
			throws MalformedURLException {
		LOGGER.info("In FCO Firewall create");
		String fcoendpoint = "https://cp.sd1.flexiant.net/soap/user/current/?wsdl";

		FCOVMDetails vmdetails = new FCOVMDetails();
		vmdetails.vmdetails(serverUUID);
		LOGGER.info("Back in FCO Firewall create");
		String clusterUUID = vmdetails.CLUSTERUUID;
		String vdcUUID = vmdetails.VDCUUID;
		LOGGER.info("ClusterUUID: " + clusterUUID + "VDCUUID:" + vdcUUID);

		FCOTokenGenerator tokengenertor = new FCOTokenGenerator();
		try {
			tokengenertor.tokenGenerator(serverUUID);
		} catch (com.extl.jade.admin.ExtilityException e1) {
			LOGGER.error("Unable to get token for user");
		}
		URL url = null;
		LOGGER.info("Starting FCO Firewall template create");

		url = new URL(com.extl.jade.user.UserAPI.class.getResource("."), fcoendpoint);

		// Get the UserAPI
		UserAPI api = new UserAPI(url, new QName("http://extility.flexiant.net", "UserAPI"));
		// and set the service port on the service
		UserService service = api.getUserServicePort();

		// Get the binding provider
		BindingProvider portBP = (BindingProvider) service;

		// and set the service endpoint
		portBP.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, fcoendpoint);

		// and the caller's authentication details and password
		portBP.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, tokengenertor.tokenID);
		portBP.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, "");

		// Create a firewall template and set required values

		FirewallTemplate firewallTemplate = templateCreator(firewallKey);

		firewallTemplate.setClusterUUID(clusterUUID);
		firewallTemplate.setResourceName(firewallKey + "template");
		firewallTemplate.setResourceType(ResourceType.FIREWALL_TEMPLATE);
		firewallTemplate.setVdcUUID(vdcUUID);
		firewallTemplate.setType(IpType.IPV_4);

		try {
			DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
			Job job = service.createFirewallTemplate(firewallTemplate, null);
			job.setStartTime(datatypeFactory.newXMLGregorianCalendar(new GregorianCalendar()));
			// Wait for the server to be created
			Job response = service.waitForJob(job.getResourceUUID(), true);
			if (response.getErrorCode() == null) {
				LOGGER.info("Firewall template created successfully");
				// Apply the firewall to the server using the UUID
				ApplyFCOFirewallTemplate applyFirewall = new ApplyFCOFirewallTemplate();
				applyFirewall.applyfirewall(job.getItemUUID(), IP, tokengenertor.tokenID);
				// If VM is in running state then we need to stop
			} else {
				LOGGER.error("Failed to create Firewall. Error: " + response.getErrorCode());
			}
		} catch (ExtilityException | DatatypeConfigurationException e) {
			LOGGER.error("Exception in create firewall: " + e.getMessage());
		}
	}

	public FirewallTemplate templateCreator(String firewallKey) {
		
		FirewallTemplate firewallTemplate = new FirewallTemplate();
		
		if(firewallKey.equals("ssh")){
			firewallTemplate = sshTemplateCreator(firewallTemplate);
		}
		if(firewallKey.equals("default")){
			firewallTemplate = allowAllTemplateCreator(firewallTemplate);
		}
		
		return firewallTemplate;
	}
	
	public FirewallTemplate allowAllTemplateCreator(FirewallTemplate firewallTemplate){
		
		firewallTemplate.setDefaultInAction(FirewallRuleAction.ALLOW);
		firewallTemplate.setDefaultOutAction(FirewallRuleAction.ALLOW);
		
		return firewallTemplate;
	}
	
	public FirewallTemplate sshTemplateCreator(FirewallTemplate firewallTemplate){
		
		firewallTemplate.setDefaultInAction(FirewallRuleAction.REJECT);
		firewallTemplate.setDefaultOutAction(FirewallRuleAction.ALLOW);
		FirewallRule sshFirewall = new FirewallRule();
		int sshPort = 22;
		sshFirewall = allowOutgoingPortRule(sshPort);
		List<FirewallRule> Firewallruleslist = firewallTemplate.getFirewallInRuleList();
		// Adding firewall rules to template
		Firewallruleslist.add(sshFirewall);
		
		return firewallTemplate;
	}

	public FirewallRule allowOutgoingPortRule(int portnumber) {

		FirewallRule firewallOut = new FirewallRule();
		firewallOut.setName("Test");
		firewallOut.setAction(FirewallRuleAction.ALLOW);
		firewallOut.setConnState(FirewallConnectionState.ALL);
		firewallOut.setDirection(FirewallRuleDirection.OUT);
		firewallOut.setIpAddress("");
		firewallOut.setProtocol(FirewallProtocol.ANY);
		firewallOut.setRemotePort(portnumber);
		return firewallOut;
	}
}
package com.flexiant;

import java.io.BufferedReader;
import java.io.InputStreamReader;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

public class DeployChef {
	private static Logger LOGGER = LogManager.getLogger(DeployChef.class);
	// TODO use of SSH key and not name is found.
	// TODO use tag information to deploy role to VM
	private final String chefRole = "role[security]";

	/*
	 * Knife is located in a different directory in docker:
	 * /opt/chefdk/embedded/bin/knife
	 */
	
	static final String SSHKEYPASSWORD = "useSSHkey";
	private final String knifeLocation = Globals.chefKnifeLocation;
	private final String chefRepoLocation = Globals.chefRepoLocation;
	
	//Deploy a standard chef configuration to a node
	public void deploychefconfig(Request request) {
		boolean foundUsername = request.hasUsername();
		boolean foundPassword = request.hasPassword();

		//Only proceed if a username/password combo is present
		if (foundUsername && foundPassword) {
			String vmIP = request.getIP();
			String password = request.getPassword();
			String username = request.getUsername();
			String command = "";
			
			LOGGER.info("SSH Key Path: " + getKeyPath(request));
			
			//Use ssh key if the password indicates SSH key is available
			if(password.equals(SSHKEYPASSWORD)){
				command = "cd " + chefRepoLocation + " && " + knifeLocation + " bootstrap " + vmIP + " -N " + vmIP + " -x " + username
						+ " -i " + getKeyPath(request)  + " -r " + '"' + chefRole + '"' + " --sudo";
			}
			//Otherwise use username/password combo
			else{
			 command = "cd " + chefRepoLocation + " && " + knifeLocation + " bootstrap " + vmIP + " -N " + vmIP + " -x " + username
					+ " -P " + password + " -r " + '"' + chefRole + '"' + " --sudo";
			}

			String s;
			Process p;
			{
				try {

					p = Runtime.getRuntime().exec(new String[] { "bash", "-c", command });
					BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
					LOGGER.info("Chef Command executed");
					LOGGER.info(command);
					while ((s = br.readLine()) != null)
						LOGGER.info("line: " + s);
					p.waitFor();
					LOGGER.info("Chef exit code: " + p.exitValue());
					p.destroy();
				} catch (Exception e) {
					LOGGER.info("Chef deployment error Exit with: " + e);
				}
			}
		}

		else {
			LOGGER.info("No user name found. Cannot deploy Chef");
		}
	}
	
	//Method to get corresponding ssh key path for each cloud
	public String getKeyPath(Request request){

		String sshKeyPath = "";

		if(request.getCloud() == Clouds.FLEX)
			sshKeyPath = Globals.FCOSSHKeyPath;
		if(request.getCloud() == Clouds.OPEN_STACK)
			sshKeyPath = Globals.OpenstackSSHKeyPath;
		if(request.getCloud() == Clouds.OPEN_NEBULA)
			sshKeyPath = Globals.OpenNebulaSSHKeyPath;
		if(request.getCloud() == Clouds.AWS)
			sshKeyPath = Globals.AWSSSHKeyPath;
		
		return sshKeyPath;
			
	}
}
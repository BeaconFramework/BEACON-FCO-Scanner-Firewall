package com.flexiant;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.GregorianCalendar;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import com.extl.jade.user.ExtilityException;
import com.extl.jade.user.Job;
import com.extl.jade.user.UserAPI;
import com.extl.jade.user.UserService;

public class ApplyFCOFirewallTemplate {
	
	private static Logger LOGGER = LogManager.getLogger(ApplyFCOFirewallTemplate.class);
	
	String fcoendpoint = Globals.FCOUserEndpoint;

	public void applyfirewall(String templateUUID, String IP, String generatedtoken) throws MalformedURLException {
		URL url = null;

		url = new URL(com.extl.jade.user.UserAPI.class.getResource("."), fcoendpoint);

		// Get the UserAPI
		UserAPI api = new UserAPI(url, new QName("http://extility.flexiant.net", "UserAPI"));
		// and set the service port on the service
		UserService service = api.getUserServicePort();

		// Get the binding provider
		BindingProvider portBP = (BindingProvider) service;

		// and set the service endpoint
		portBP.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, fcoendpoint);

		// and the caller's authentication details and password
		portBP.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, generatedtoken);
		portBP.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, "");

		try {

			DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
			Job job = service.applyFirewallTemplate(templateUUID, IP, null);
			job.setStartTime(datatypeFactory.newXMLGregorianCalendar(new GregorianCalendar()));
			// Wait for the server to be created
			Job response = service.waitForJob(job.getResourceUUID(), true);
			if (response.getErrorCode() == null) {
				LOGGER.info("Firewall applied successfully");
			} else {
				LOGGER.error("Failed to add Firewall. Error: " + response.getErrorCode());
			}
		} catch (ExtilityException | DatatypeConfigurationException e) {
			LOGGER.error("Exception caught: " + e.getMessage());
		}
	}
}
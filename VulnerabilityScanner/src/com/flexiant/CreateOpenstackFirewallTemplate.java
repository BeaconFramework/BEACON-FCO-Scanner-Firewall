package com.flexiant;

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.openstack4j.api.Builders;
import org.openstack4j.api.OSClient.OSClientV2;
import org.openstack4j.model.compute.Server;
import org.openstack4j.model.network.SecurityGroup;
import org.openstack4j.model.network.SecurityGroupRule;
import org.openstack4j.openstack.OSFactory;

public class CreateOpenstackFirewallTemplate {

	private static Logger LOGGER = LogManager.getLogger(CreateOpenstackFirewallTemplate.class);

	private final String endpoint = Globals.OpenstackEndpoint;
	private final String username = Globals.OpenstackCloudUsernameCredential;
	private final String password = Globals.OpenstackCloudPasswordCredential;
	private final String tenant = Globals.OpenstackCloudTenant;

	public void createFirewall(String UUID) {

		try{
		
		// Authenticate with Openstack API
		OSClientV2 os = OSFactory.builderV2().endpoint(endpoint).credentials(username, password).tenantName(tenant)
				.authenticate();
		LOGGER.info("Authenticated");
		// Check VM for metadata firewall key entry
		String key = checkForKey(os, UUID);
		LOGGER.info("Key: " + key);
		// Create the security group for the given key
		SecurityGroup secGroup = createFirewallFromKey(key, os);
		// Apply security group to the VM
		os.compute().servers().addSecurityGroup(UUID, secGroup.getId());
		}
		catch(Exception e){
			
			LOGGER.error(e.getMessage());
		}
		
		
	}

	private SecurityGroup createFirewallFromKey(String key, OSClientV2 os) {

		//Check to see if key corresponds to templates
		if (key.equals("default"))
			return createDefaultFirewall(os);
		if (key.equals("mysql"))
			return createMySQLFirewall(os);
		if (key.equals("ssh"))
			return createSSHFirewall(os);
		if (key.equals("email"))
			return createEmailFirewall(os);
		if (key.equals("web server"))
			return createWebServerFirewall(os);
		if (key.equals("telnet"))
			return createTelnetFirewall(os);

		return null;
	}

	//Create default firewall, opening all TCP ports
	private SecurityGroup createDefaultFirewall(OSClientV2 os) {

		SecurityGroup secGroup = Builders.securityGroup().name("Generated Default Firewall").build();
		secGroup = os.networking().securitygroup().create(secGroup);
		//Create rules within the security group
		SecurityGroupRule secRule = Builders.securityGroupRule().securityGroupId(secGroup.getId()).direction("ingress")
				.portRangeMin(1).portRangeMax(65535).protocol("TCP").build();
		os.networking().securityrule().create(secRule);

		return secGroup;
	}

	//Create firewall for SSH use
	private SecurityGroup createSSHFirewall(OSClientV2 os) {

		SecurityGroup secGroup = Builders.securityGroup().name("Generated SSH Firewall").build();
		secGroup = os.networking().securitygroup().create(secGroup);
		//Create rules within the security group
		SecurityGroupRule sshRule = Builders.securityGroupRule().securityGroupId(secGroup.getId()).direction("ingress")
				.portRangeMin(22).portRangeMax(22).protocol("TCP").build();
		os.networking().securityrule().create(sshRule);

		return secGroup;
	}

	//Create firewall for Telnet use
	private SecurityGroup createTelnetFirewall(OSClientV2 os) {

		SecurityGroup secGroup = Builders.securityGroup().name("Generated Telnet Firewall").build();
		secGroup = os.networking().securitygroup().create(secGroup);
		//Create rules within the security group
		SecurityGroupRule telnetRule = Builders.securityGroupRule().securityGroupId(secGroup.getId())
				.direction("ingress").portRangeMin(23).portRangeMax(23).protocol("TCP").build();
		os.networking().securityrule().create(telnetRule);

		return secGroup;
	}

	//Create firewall for MySQL server use
	private SecurityGroup createMySQLFirewall(OSClientV2 os) {

		SecurityGroup secGroup = Builders.securityGroup().name("Generated MySQL Firewall").build();
		secGroup = os.networking().securitygroup().create(secGroup);
		SecurityGroupRule mySQLRule = Builders.securityGroupRule().securityGroupId(secGroup.getId())
				.direction("ingress").portRangeMin(1433).portRangeMax(1433).protocol("TCP").build();
		SecurityGroupRule mySQLRule2 = Builders.securityGroupRule().securityGroupId(secGroup.getId())
				.direction("ingress").portRangeMin(3306).portRangeMax(3306).protocol("TCP").build();
		SecurityGroupRule sshRule = Builders.securityGroupRule().securityGroupId(secGroup.getId()).direction("ingress")
				.portRangeMin(22).portRangeMax(22).protocol("TCP").build();

		//Create rules within the security group
		os.networking().securityrule().create(mySQLRule);
		os.networking().securityrule().create(mySQLRule2);
		os.networking().securityrule().create(sshRule);

		return secGroup;
	}

	//Create firewall for use with various email protocols
	private SecurityGroup createEmailFirewall(OSClientV2 os) {

		SecurityGroup secGroup = Builders.securityGroup().name("Generated Email Firewall").build();
		secGroup = os.networking().securitygroup().create(secGroup);
		SecurityGroupRule smtpRule = Builders.securityGroupRule().securityGroupId(secGroup.getId()).direction("ingress")
				.portRangeMin(25).portRangeMax(25).protocol("TCP").build();
		SecurityGroupRule pop3Rule = Builders.securityGroupRule().securityGroupId(secGroup.getId()).direction("ingress")
				.portRangeMin(110).portRangeMax(110).protocol("TCP").build();
		SecurityGroupRule imapRule = Builders.securityGroupRule().securityGroupId(secGroup.getId()).direction("ingress")
				.portRangeMin(143).portRangeMax(143).protocol("TCP").build();

		//Create rules within the security group
		os.networking().securityrule().create(smtpRule);
		os.networking().securityrule().create(pop3Rule);
		os.networking().securityrule().create(imapRule);

		return secGroup;
	}

	//Create firewall for http/https use and FTP 
	private SecurityGroup createWebServerFirewall(OSClientV2 os) {

		SecurityGroup secGroup = Builders.securityGroup().name("Generated Web Server Firewall").build();
		secGroup = os.networking().securitygroup().create(secGroup);
		SecurityGroupRule ftpDataRule = Builders.securityGroupRule().securityGroupId(secGroup.getId())
				.direction("ingress").portRangeMin(20).portRangeMax(20).protocol("TCP").build();
		SecurityGroupRule ftpControlRule = Builders.securityGroupRule().securityGroupId(secGroup.getId())
				.direction("ingress").portRangeMin(21).portRangeMax(21).protocol("TCP").build();
		SecurityGroupRule httpRule = Builders.securityGroupRule().securityGroupId(secGroup.getId()).direction("ingress")
				.portRangeMin(80).portRangeMax(80).protocol("TCP").build();
		SecurityGroupRule httpsRule = Builders.securityGroupRule().securityGroupId(secGroup.getId())
				.direction("ingress").portRangeMin(443).portRangeMax(443).protocol("TCP").build();
		
		//Create rules within the security group
		os.networking().securityrule().create(ftpDataRule);
		os.networking().securityrule().create(ftpControlRule);
		os.networking().securityrule().create(httpRule);
		os.networking().securityrule().create(httpsRule);

		return secGroup;
	}

	//Check VM metadata for firewall key
	private String checkForKey(OSClientV2 os, String UUID) {

		Server server = os.compute().servers().get(UUID);
		String keyName = "firewall";
		String defaultValue = "default";
		Map<String, String> metadata = server.getMetadata();
		String value = metadata.get(keyName);
		LOGGER.info("Metadata Key value: " +value);

		if (value == null || value.equals(""))
			return defaultValue;
		else
			return value;
	}

}

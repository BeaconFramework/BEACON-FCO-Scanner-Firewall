package com.vnf;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.openstack4j.api.Builders;
import org.openstack4j.api.OSClient.OSClientV2;
import org.openstack4j.model.tacker.Vnf;
import org.openstack4j.model.tacker.Vnfd;
import org.openstack4j.openstack.OSFactory;
import org.openstack4j.openstack.tacker.domain.VnfdAttributes;
import org.openstack4j.openstack.tacker.domain.VnfdServiceTypes;

import com.global.Globals;

public class TackerDeployment {
	
	private final String endpoint = Globals.tackerEndpoint;
	private final String username = Globals.tackerUsername;
	private final String password = Globals.tackerPassword;
	private final String tenant = Globals.tackerTenant;
	
	DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	Date date = new Date();
	
	public void deployTackerVNF(){
		
		OSClientV2 os = authenticate();
		
		Vnfd vnfd = createVNFD(os);
		
		deployVNF(os,vnfd);
		
	}

public OSClientV2 authenticate() {
		
		OSClientV2 os = OSFactory.builderV2().endpoint(endpoint).credentials(username, password).tenantName(tenant)
				.authenticate();
		
		return os;
		
	}

	public void deployVNF(OSClientV2 os, Vnfd vnfd){
		
		Vnf vnf = Builders.tacker().vnf().vnfdId(vnfd.getId()).name("VNF " + dateFormat.format(date)).description("Created by BEACON VM Security Manager").build();
		
		os.tacker().vnf().create(vnf);
	}

public Vnfd createVNFD(OSClientV2 os){
	List<? extends Vnf> vnfs = os.tacker().vnf().list();
	
	VnfdAttributes vnfdAttributes = new VnfdAttributes();
	
	vnfdAttributes.vnfd(Globals.tackerVNFDString);
	
	List<VnfdServiceTypes> serviceTypes = new ArrayList<VnfdServiceTypes>();
	
	VnfdServiceTypes serviceType = new VnfdServiceTypes();
	serviceType.serviceType("vnfd");
	
	serviceTypes.add(serviceType);
	
	Vnfd vnfd = Builders.tacker().vnfd().attributes(vnfdAttributes).name("VNFD " + dateFormat.format(date)).description("apitest").serviceTypes(serviceTypes).build();
	
	vnfd = os.tacker().vnfd().create(vnfd);
	
	List<? extends Vnfd> vnfds = os.tacker().vnfd().list();
	
	return vnfd;

}
	
}

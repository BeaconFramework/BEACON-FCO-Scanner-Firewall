
package com.scanner;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.log4j.Level;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;

import com.chef.DeployChef;
import com.firewall.CreateAWSFirewallTemplate;
import com.firewall.CreateFCOFirewallFromConfig;
import com.firewall.CreateOpenNebulaFirewallFromConfig;
import com.firewall.CreateOpenstackFirewallFromConfig;
import com.global.Globals;
import com.model.Clouds;
import com.model.Request;
import com.vnf.TackerDeployment;

/**
 * This runnable runs a scan on a VM and gets the report. The report obtained is
 * stored as a Document and is emailed to the user as an attachment.
 * 
 * @author mramannavar,aphee,dwhigham
 *
 */
public class ExecuteScan implements Runnable {

	protected static String PATH_TO_REPORTS = "/home/reports";
	private static Logger LOGGER = LogManager.getLogger(ExecuteScan.class);
	private Request request = null;

	// Store the report in the same location with name - IP.xml
	private String storeReport(Document xml, String ip, String cloud) {

		// Removed date time element for testing
		SimpleDateFormat dateFormatYear = new SimpleDateFormat("DD-MM-YYYY");
		SimpleDateFormat dateFormatTime = new SimpleDateFormat("HH-mm-ss");
		Date date = new Date();
		String filePath = PATH_TO_REPORTS + "/" + cloud + "/" + dateFormatYear.format(date) + "/"
				+ dateFormatTime.format(date) + "/" + ip + ".xml";
		LOGGER.info("Report path: " + filePath);
		try {
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(xml);
			File dirs = new File(PATH_TO_REPORTS + "/" + cloud + "/" + dateFormatYear.format(date) + "/"
					+ dateFormatTime.format(date));
			dirs.mkdirs();
			StreamResult result = new StreamResult(new File(filePath));
			transformer.transform(source, result);

		} catch (TransformerConfigurationException e) {
			e.printStackTrace();
		} catch (TransformerException e) {
			e.printStackTrace();
		}
		return filePath;
	}

	public ExecuteScan(Request request) {
		this.request = request;
	}

	@Override
	public void run() {

		try {
				switch (request.getCloud()) {
				case FLEX:
					
					if(Globals.FCOScan){
						performScan();
					}
					
					// Check if chef configuration is enabled
					if (Globals.FCOChef) {
						// Implement Chef deployment onto VM
						LOGGER.info("Deploying Chef onto VM");
						// Begin chef deployment
						DeployChef deploychef = new DeployChef();
						deploychef.deploychefconfig(request);
					}
					
					if(Globals.FCOFirewall){

					LOGGER.info("Flex firewall create code");
					// Check the firewall requests hashmap for the VM IP
					String firewallKey = Globals.firewallRequests.get(request.getIP());
					if (firewallKey != null) {

						/*
						 * If the application has received a firewall key for
						 * the VM, use it when creating the firewall
						 */
						LOGGER.info("Firewall key: " + firewallKey);
						CreateFCOFirewallFromConfig fcoFirewallCreate = new CreateFCOFirewallFromConfig();
						fcoFirewallCreate.createFirewall(request.getServerUUID(), request.getEmailID(), request.getIP(),
								firewallKey);
						// Remove the used firewall key from the hashmap
						Globals.firewallRequests.remove(request.getIP());
						logVMInfo(request);
						LOGGER.info("FCO Chef set to: " + Globals.FCOChef);
						break;
						
					} else {
						/*
						 * If no firewall key was found then apply a default
						 * template which can be edited by the user
						 */
						LOGGER.log(Level.INFO, "Firewall key not found, applying default template");
						CreateFCOFirewallFromConfig fcofirewallcreate = new CreateFCOFirewallFromConfig();
						fcofirewallcreate.createFirewall(request.getServerUUID(), request.getEmailID(), request.getIP(),
								"default");
						logVMInfo(request);
						break;
					}
					
					}
				case OPEN_STACK:

					if(Globals.OpenstackScan){
						performScan();
					}
					
					// Check if chef configuration is enabled
					if (Globals.OpenstackChef) {
						// Implement Chef deployment onto VM
						LOGGER.info("Deploying Chef onto VM");
						// Begin chef deployment
						DeployChef deploychefOS = new DeployChef();
						deploychefOS.deploychefconfig(request);
					}

					if(Globals.OpenstackFirewall){
					
					LOGGER.info("Creating Openstack firewall");
					// Create firewall template on Openstack platform
					CreateOpenstackFirewallFromConfig openstackFirewallCreate = new CreateOpenstackFirewallFromConfig();
					openstackFirewallCreate.createFirewall(request.getServerUUID());
					logVMInfo(request);
					break;
					}

				case OPEN_NEBULA:
					
					if(Globals.OpenNebulaScan){
						performScan();
					}

					// Check if chef configuration is enabled
					if (Globals.OpenNebulaChef) {
						// Implement Chef deployment onto VM
						LOGGER.info("Deploy Chef onto VM");
						// Begin chef deployment
						DeployChef deploychefON = new DeployChef();
						deploychefON.deploychefconfig(request);
					}
					
					if(Globals.OpenNebulaFirewall){
					// Create firewall template on Open Nebula
					LOGGER.log(Level.INFO, "Editing Open Nebula Security Group");
					CreateOpenNebulaFirewallFromConfig openNebulaFirewallCreate = new CreateOpenNebulaFirewallFromConfig();
					openNebulaFirewallCreate.editSecurityGroup(request.getServerUUID(), request.getEmailID(),
							request.getIP());
					logVMInfo(request);
					break;
					}

				case AWS:

					if(Globals.AWSScan){
						performScan();
					}
					
					// Check if chef configuration
					if (Globals.AWSChef) {
						LOGGER.info("Deploy Chef onto VM");
						// Begin chef deployment
						DeployChef deploychefAWS = new DeployChef();
						deploychefAWS.deploychefconfig(request);
					}
					
					if(Globals.AWSFirewall){
					
					LOGGER.log(Level.INFO, "Editing AWS Security Group");
					//Create AWS Firewall
					CreateAWSFirewallTemplate awsFirewallCreate = new CreateAWSFirewallTemplate();
					awsFirewallCreate.CreateAWSFirewallTemplate(request.getServerUUID());
					logVMInfo(request);
					break;
					}

				case NONE:
					LOGGER.info("No cloud received in request");
					break;

				default:
					LOGGER.error("Unable to determine which cloud sent request");
					break;
				}
				
				if(Globals.tackerDeployment){
					
					LOGGER.info("Deploying Tacker");
					TackerDeployment tackerDeployment = new TackerDeployment();
					tackerDeployment.deployTackerVNF();
				}
		}
				
				catch(Exception e){
					LOGGER.error("An error occurred.  Message:");
					LOGGER.error(e.getMessage());
				}
			
	}

	public boolean performScan(){
		
		Scanner scanner = new Scanner(request);
		
		//String reportId = "NOSCAN";
		// Begin the scan
		
		try{
			String reportId = scanner.startScanning();


		if (null != reportId) {

			if (!reportId.equals("NOSCAN")) {

				Document xmlDoc = scanner.getReport(reportId);
				LOGGER.info("XML document generated");

				// Backup the report as an XML file on the scanner side
				String fileName = storeReport(xmlDoc, request.getIP(), request.getCloud().name());
				EmailSystem es = new EmailSystem();
				es.sendTaskSuccessEmail(request.getServerUUID(), fileName, request.getIP(), request.getEmailID());
				LOGGER.info("After Email sent before Switch");
				
				return true;
				
			}
		}
				
				else {
					LOGGER.error("The report could not be generated as the task did not complete");
					EmailSystem es = new EmailSystem();
					es.sendTaskFailedEmail(request.getServerUUID(), request.getIP(), request.getEmailID());
					return false;
				}
			}

			catch (ScannerException e) {
				LOGGER.error("Something went wrong in scanner", e);
				return false;
			}
		catch (InterruptedException e) {
				LOGGER.error("Something went wrong with the scanner", e);
				return false;

			} catch (IOException e) {
				LOGGER.error("Failed to get the report", e);
				return false;
			}
		return false;
			}

	public void logVMInfo(Request request) {

		try {

			File infoFile = new File(Globals.vmInfoFilePath);

			if (infoFile.createNewFile()) {
				LOGGER.info("VM Logging file created.");
			} else {
				LOGGER.info("VM Logging file exists.");
			}

			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date = new Date();

			// Append current VM info to file
			try (FileWriter fw = new FileWriter(Globals.vmInfoFilePath, true);
					BufferedWriter bw = new BufferedWriter(fw);
					PrintWriter out = new PrintWriter(bw)) {
				out.println("Server IP Address: " + request.getIP());
				out.println("Server UUID: " + request.getServerUUID());
				out.println("Cloud Platform: " + request.getCloud());
				out.println("Email Address: " + request.getEmailID());
				out.println("Username and password/SSH Key supplied: " + request.hasUsername());
				out.println("Time/Date scan executed: " + dateFormat.format(date));
				out.println();

				LOGGER.info("VM details written to file: " + Globals.vmInfoFilePath);
			}
		} catch (IOException e) {
			LOGGER.error("VM Info Logger IO Error");
		}

	}
}

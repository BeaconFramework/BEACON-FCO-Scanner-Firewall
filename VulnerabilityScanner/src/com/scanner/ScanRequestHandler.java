package com.scanner;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.concurrent.ArrayBlockingQueue;

import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import org.apache.log4j.Level;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import com.flexiant.VMDetails;
import com.global.Globals;
import com.model.Clouds;
import com.model.KeyDetails;
import com.model.Request;

/**
 * Class to handle the socket requests. This class reads from the socket and
 * adds to the queue.
 * 
 * @author mramannavar
 *
 */
public class ScanRequestHandler implements Runnable {

	Socket socket = null;
	ArrayBlockingQueue<Request> queue = null;
	private static Logger LOGGER = LogManager.getLogger(ScanRequestHandler.class);
	Clouds cloud;

	// Set up the constructor for the request handler
	public ScanRequestHandler(Socket socket, ArrayBlockingQueue<Request> queue, Clouds cloud) {
		this.socket = socket;
		this.queue = queue;
		this.cloud = cloud;
	}

	// Method to decrypt an encrypted object as VM details
	public static VMDetails decryptSealedVMObject(SealedObject sealedDetails) throws Exception {
		SecretKey key64 = new SecretKeySpec(new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 }, "Blowfish");
		Cipher cipher = Cipher.getInstance("Blowfish");
		cipher.init(Cipher.DECRYPT_MODE, key64);
		VMDetails details = (VMDetails) sealedDetails.getObject(cipher);
		return details;
	}

	// Method to decrypt an encrypted object as Firewall key details
	public static KeyDetails decryptSealedKeyObject(SealedObject sealedDetails) throws Exception {

		SecretKey key64 = new SecretKeySpec(new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 }, "Blowfish");
		Cipher cipher = Cipher.getInstance("Blowfish");
		cipher.init(Cipher.DECRYPT_MODE, key64);
		KeyDetails details = (KeyDetails) sealedDetails.getObject(cipher);
		return details;

	}

	@Override
	public void run() {
		try {
			LOGGER.log(Level.INFO, "Adding a request to the queue...");
			ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
			VMDetails details;
			VMDetails detailsRaw = null;
			KeyDetails keyDetailsRaw = null;
			boolean objectRead = false;
			boolean isKey = false;

			Object obj = ois.readObject();

			// First try parsing request as encrypted VM details
			try {
				javax.crypto.SealedObject sealedDetails = (javax.crypto.SealedObject) obj;
				detailsRaw = decryptSealedVMObject(sealedDetails);
				LOGGER.log(Level.INFO, "Decryption of details successful");
				objectRead = true;
			}

			catch (Exception ex1) {
				LOGGER.log(Level.WARN, "Not an encrypted VMDetails object");
			}

			if (objectRead == false) {
				// Next try parsing request as unencrypted VM details
				try {
					detailsRaw = (VMDetails) obj;
					LOGGER.log(Level.INFO, "Unencrypted object successfully read");
					objectRead = true;
				}

				catch (Exception ex2) {
					LOGGER.log(Level.WARN, "Not an unencrypted VMDetails object");
				}
			}

			if (objectRead == false) {
				// Finally, try to read the object as a firewall key object
				try {
					SealedObject sealedDetails = (SealedObject) obj;
					keyDetailsRaw = decryptSealedKeyObject(sealedDetails);
					LOGGER.log(Level.INFO, "Decryption of details as firewall key details successful");
					isKey = true;

					LOGGER.log(Level.INFO, "Key I.P: " + keyDetailsRaw.getServerIP());
					LOGGER.log(Level.INFO, "Key : " + keyDetailsRaw.getKey());

					Globals.firewallRequests.put(keyDetailsRaw.getServerIP(), keyDetailsRaw.getKey());

					// LOGGER.log(Level.INFO, "Hashmap size: " +
					// FirewallRequests.firewallRequests.size());

				} catch (Exception ex3) {
					LOGGER.log(Level.ERROR, "Object unable to be parsed as Firewall Key Details Object");
				}
			}

			if (objectRead) {
				// Get server details from object
				String serverUUID = detailsRaw.getServerUUID();
				String serverIP = detailsRaw.getIP();
				String emailID = detailsRaw.getEmailID();
				String username = detailsRaw.getUsername();
				String password = detailsRaw.getPassword();

				LOGGER.info("Input UUID " + serverUUID);
				LOGGER.info("Input Server I.P. " + serverIP);
				LOGGER.info("Input email address " + emailID);
				LOGGER.info("Input username: " + username);
				LOGGER.info("Input password: " + password);

				// Create VMDetails object
				details = new VMDetails(serverUUID, serverIP, emailID, username, password);
				Request request = new Request(details);
				request.setCloud(cloud);

				// The ArrayBlockingQueue is thread safe
				queue.add(request);
			}

			else {
				if (!isKey)
					LOGGER.log(Level.ERROR, "No valid object received, aborting");
			}
		} catch (IOException e) {
			LOGGER.error("Failed to read data from the Socket", e);
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
